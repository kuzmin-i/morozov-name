{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ikuzmin/Documents/morozov-name/pages/three-model.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useState, Suspense } from 'react';\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber';\nimport * as THREE from \"three\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { useEffect } from 'react';\nimport { PerspectiveCamera } from 'three';\n\nfunction Bird(props) {\n  const mesh1 = useRef();\n  const gltf = useLoader(GLTFLoader, 'models/1.glb');\n  console.log(gltf.scene);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: mesh1,\n    object: gltf.scene,\n    scale: [1.5, 1.5, 1.5],\n    onPointerOver: () => {\n      console.log(mesh1.current);\n    }\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef(); // Set up state for the hovered and active state\n\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: event => setActive(!active),\n    onPointerOver: event => setHover(true),\n    onPointerOut: event => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Camera(props) {\n  const cameraRef = useRef();\n  const {\n    setDefaultCamera\n  } = useThree();\n  useEffect(() => void setDefaultCamera(cameraRef.current), []);\n  useFrame(() => cameraRef.current.updateMatrixWorld());\n  return /*#__PURE__*/_jsxDEV(\"perspectiveCamera\", _objectSpread({\n    ref: cameraRef\n  }, props), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 10\n  }, this);\n}\n\nconst ThreeRender = props => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(Camera, {\n        position: props.position,\n        rotation: props.rotation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10],\n        intensity: 14\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [-1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/_jsxDEV(Bird, {\n          position: [1.2, 0, 0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ThreeRender;","map":{"version":3,"sources":["/Users/ikuzmin/Documents/morozov-name/pages/three-model.js"],"names":["React","useRef","useState","Suspense","Canvas","useFrame","useLoader","useThree","THREE","GLTFLoader","useEffect","PerspectiveCamera","Bird","props","mesh1","gltf","console","log","scene","current","Box","mesh","hovered","setHover","active","setActive","rotation","x","y","event","Camera","cameraRef","setDefaultCamera","updateMatrixWorld","ThreeRender","width","height","position"],"mappings":"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","sourcesContent":["import React, { useRef, useState, Suspense } from 'react'\nimport { Canvas, useFrame, useLoader, useThree } from 'react-three-fiber'\n\nimport * as THREE from \"three\";\n\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport { useEffect } from 'react';\nimport { PerspectiveCamera } from 'three';\n\nfunction Bird(props) {\n  \n  const mesh1 = useRef()\n  const gltf = useLoader(GLTFLoader, 'models/1.glb')\n  \n  console.log(gltf.scene)\n\n  return (\n    <primitive\n      {...props}\n      ref={mesh1}\n      object = {gltf.scene}\n      scale={[1.5, 1.5, 1.5]}\n      onPointerOver = {\n        () => {console.log(mesh1.current)}\n      }\n      />\n      \n  )\n}\n\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nfunction Camera(props) {\n  const cameraRef = useRef()\n  const { setDefaultCamera } = useThree()\n  useEffect(() => void setDefaultCamera(cameraRef.current), [])\n  useFrame(() => cameraRef.current.updateMatrixWorld())\n  return <perspectiveCamera ref={cameraRef} {...props} />\n}\n\nconst ThreeRender = (props) => {\n\n    return (\n        <div style={{width: '100vw', height: '100vh'}}>\n            <Canvas>\n                <Camera\n                  position = { props.position }\n                  rotation = { props.rotation }\n                />\n                <ambientLight />\n                <pointLight position={[10, 10, 10]} intensity = {14} />\n                <Box position={[-1.2, 0, 0]} />\n                <Box position={[1.2, 0, 0]} />\n                <Suspense fallback = {null}><Bird position={[1.2, 0, 0]} /></Suspense>\n            </Canvas>\n        </div>\n    )\n}\n\nexport default ThreeRender"]},"metadata":{},"sourceType":"module"}