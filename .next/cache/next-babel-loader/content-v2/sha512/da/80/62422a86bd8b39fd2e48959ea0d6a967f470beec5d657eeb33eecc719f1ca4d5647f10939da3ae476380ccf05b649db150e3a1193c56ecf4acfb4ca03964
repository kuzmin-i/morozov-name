{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ikuzmin/Documents/morozov-name/pages/three-model.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ReactDOM from 'react-dom';\nimport React, { useRef, useState, Suspense } from 'react';\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber';\nimport morozov from 'models/1.glb';\nimport * as THREE from \"three\";\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n\nfunction Bird(props) {\n  const mesh1 = useRef();\n  const gltf = useLoader(GLTFLoader, morozov);\n  return /*#__PURE__*/_jsxDEV(\"primitive\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: mesh1,\n    object: gltf.scene,\n    scale: [1.5, 1.5, 1.5]\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  console.log(mesh); // Set up state for the hovered and active state\n\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false); // Rotate mesh every frame, this is outside of React without overhead\n\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: event => setActive(!active),\n    onPointerOver: event => setHover(true),\n    onPointerOut: event => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\nconst ThreeRender = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [-1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n        fallback: null,\n        children: /*#__PURE__*/_jsxDEV(Bird, {\n          position: [1.2, 0, 0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 45\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ThreeRender;","map":{"version":3,"sources":["/Users/ikuzmin/Documents/morozov-name/pages/three-model.js"],"names":["ReactDOM","React","useRef","useState","Suspense","Canvas","useFrame","useLoader","morozov","THREE","GLTFLoader","Bird","props","mesh1","gltf","scene","Box","mesh","console","log","hovered","setHover","active","setActive","current","rotation","x","y","event","ThreeRender","width","height"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom'\nimport React, { useRef, useState, Suspense } from 'react'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\n\nimport morozov from 'models/1.glb'\n\nimport * as THREE from \"three\";\n\n\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nfunction Bird(props) {\n  \n  const mesh1 = useRef()\n  const gltf = useLoader(GLTFLoader, morozov)\n  \n  \n\n  return (\n    <primitive\n      {...props}\n      ref={mesh1}\n      object = {gltf.scene}\n      scale={[1.5, 1.5, 1.5]}\n      />\n      \n  )\n}\n\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n\n  console.log(mesh)\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  // Rotate mesh every frame, this is outside of React without overhead\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01\n  })\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nconst ThreeRender = () => {\n\n    return (\n        <div style={{width: '100vw', height: '100vh'}}>\n            <Canvas>\n                \n                <ambientLight />\n                <pointLight position={[10, 10, 10]} />\n                <Box position={[-1.2, 0, 0]} />\n                <Box position={[1.2, 0, 0]} />\n                <Suspense fallback = {null}><Bird position={[1.2, 0, 0]} /></Suspense>\n            </Canvas>\n        </div>\n    )\n}\n\nexport default ThreeRender"]},"metadata":{},"sourceType":"module"}