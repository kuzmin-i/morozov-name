{"ast":null,"code":"/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\nvar THREE = require('three');\n\nvar _GLTFLoader = function () {\n  function GLTFLoader(manager) {\n    THREE.Loader.call(this, manager);\n    this.dracoLoader = null;\n    this.ddsLoader = null;\n  }\n\n  GLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n    constructor: GLTFLoader,\n    load: function load(url, onLoad, onProgress, onError) {\n      var scope = this;\n      var resourcePath;\n\n      if (this.resourcePath !== '') {\n        resourcePath = this.resourcePath;\n      } else if (this.path !== '') {\n        resourcePath = this.path;\n      } else {\n        resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n      } // Tells the LoadingManager to track an extra item, which resolves after\n      // the model is fully loaded. This means the count of items loaded will\n      // be incorrect, but ensures manager.onLoad() does not fire early.\n\n\n      scope.manager.itemStart(url);\n\n      var _onError = function _onError(e) {\n        if (onError) {\n          onError(e);\n        } else {\n          console.error(e);\n        }\n\n        scope.manager.itemError(url);\n        scope.manager.itemEnd(url);\n      };\n\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n\n      if (scope.crossOrigin === 'use-credentials') {\n        loader.setWithCredentials(true);\n      }\n\n      loader.load(url, function (data) {\n        try {\n          scope.parse(data, resourcePath, function (gltf) {\n            onLoad(gltf);\n            scope.manager.itemEnd(url);\n          }, _onError);\n        } catch (e) {\n          _onError(e);\n        }\n      }, onProgress, _onError);\n    },\n    setDRACOLoader: function setDRACOLoader(dracoLoader) {\n      this.dracoLoader = dracoLoader;\n      return this;\n    },\n    setDDSLoader: function setDDSLoader(ddsLoader) {\n      this.ddsLoader = ddsLoader;\n      return this;\n    },\n    parse: function parse(data, path, onLoad, onError) {\n      var content;\n      var extensions = {};\n\n      if (typeof data === 'string') {\n        content = data;\n      } else {\n        var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n\n        if (magic === BINARY_EXTENSION_HEADER_MAGIC) {\n          try {\n            extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n          } catch (error) {\n            if (onError) onError(error);\n            return;\n          }\n\n          content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n        } else {\n          content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n        }\n      }\n\n      var json = JSON.parse(content);\n\n      if (json.asset === undefined || json.asset.version[0] < 2) {\n        if (onError) onError(new Error('THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.'));\n        return;\n      }\n\n      if (json.extensionsUsed) {\n        for (var i = 0; i < json.extensionsUsed.length; ++i) {\n          var extensionName = json.extensionsUsed[i];\n          var extensionsRequired = json.extensionsRequired || [];\n\n          switch (extensionName) {\n            case EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n              extensions[extensionName] = new GLTFLightsExtension(json);\n              break;\n\n            case EXTENSIONS.KHR_MATERIALS_UNLIT:\n              extensions[extensionName] = new GLTFMaterialsUnlitExtension();\n              break;\n\n            case EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n              extensions[extensionName] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n              break;\n\n            case EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n              extensions[extensionName] = new GLTFDracoMeshCompressionExtension(json, this.dracoLoader);\n              break;\n\n            case EXTENSIONS.MSFT_TEXTURE_DDS:\n              extensions[extensionName] = new GLTFTextureDDSExtension(this.ddsLoader);\n              break;\n\n            case EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n              extensions[extensionName] = new GLTFTextureTransformExtension();\n              break;\n\n            case EXTENSIONS.KHR_MESH_QUANTIZATION:\n              extensions[extensionName] = new GLTFMeshQuantizationExtension();\n              break;\n\n            default:\n              if (extensionsRequired.indexOf(extensionName) >= 0) {\n                console.warn('THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".');\n              }\n\n          }\n        }\n      }\n\n      var parser = new GLTFParser(json, extensions, {\n        path: path || this.resourcePath || '',\n        crossOrigin: this.crossOrigin,\n        manager: this.manager\n      });\n      parser.parse(onLoad, onError);\n    }\n  });\n  /* GLTFREGISTRY */\n\n  function GLTFRegistry() {\n    var objects = {};\n    return {\n      get: function get(key) {\n        return objects[key];\n      },\n      add: function add(key, object) {\n        objects[key] = object;\n      },\n      remove: function remove(key) {\n        delete objects[key];\n      },\n      removeAll: function removeAll() {\n        objects = {};\n      }\n    };\n  }\n  /*********************************/\n\n  /********** EXTENSIONS ***********/\n\n  /*********************************/\n\n\n  var EXTENSIONS = {\n    KHR_BINARY_GLTF: 'KHR_binary_glTF',\n    KHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n    KHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n    KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n    KHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n    KHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n    KHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n    MSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n  };\n  /**\n   * DDS Texture Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n   *\n   */\n\n  function GLTFTextureDDSExtension(ddsLoader) {\n    if (!ddsLoader) {\n      throw new Error('THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader');\n    }\n\n    this.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n    this.ddsLoader = ddsLoader;\n  }\n  /**\n   * Punctual Lights Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n   */\n\n\n  function GLTFLightsExtension(json) {\n    this.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n    var extension = json.extensions && json.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] || {};\n    this.lightDefs = extension.lights || [];\n  }\n\n  GLTFLightsExtension.prototype.loadLight = function (lightIndex) {\n    var lightDef = this.lightDefs[lightIndex];\n    var lightNode;\n    var color = new THREE.Color(0xffffff);\n    if (lightDef.color !== undefined) color.fromArray(lightDef.color);\n    var range = lightDef.range !== undefined ? lightDef.range : 0;\n\n    switch (lightDef.type) {\n      case 'directional':\n        lightNode = new THREE.DirectionalLight(color);\n        lightNode.target.position.set(0, 0, -1);\n        lightNode.add(lightNode.target);\n        break;\n\n      case 'point':\n        lightNode = new THREE.PointLight(color);\n        lightNode.distance = range;\n        break;\n\n      case 'spot':\n        lightNode = new THREE.SpotLight(color);\n        lightNode.distance = range; // Handle spotlight properties.\n\n        lightDef.spot = lightDef.spot || {};\n        lightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n        lightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n        lightNode.angle = lightDef.spot.outerConeAngle;\n        lightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n        lightNode.target.position.set(0, 0, -1);\n        lightNode.add(lightNode.target);\n        break;\n\n      default:\n        throw new Error('THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".');\n    } // Some lights (e.g. spot) default to a position other than the origin. Reset the position\n    // here, because node-level parsing will only override position if explicitly specified.\n\n\n    lightNode.position.set(0, 0, 0);\n    lightNode.decay = 2;\n    if (lightDef.intensity !== undefined) lightNode.intensity = lightDef.intensity;\n    lightNode.name = lightDef.name || 'light_' + lightIndex;\n    return Promise.resolve(lightNode);\n  };\n  /**\n   * Unlit Materials Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n   */\n\n\n  function GLTFMaterialsUnlitExtension() {\n    this.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n  }\n\n  GLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n    return THREE.MeshBasicMaterial;\n  };\n\n  GLTFMaterialsUnlitExtension.prototype.extendParams = function (materialParams, materialDef, parser) {\n    var pending = [];\n    materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n    materialParams.opacity = 1.0;\n    var metallicRoughness = materialDef.pbrMetallicRoughness;\n\n    if (metallicRoughness) {\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n      }\n    }\n\n    return Promise.all(pending);\n  };\n  /* BINARY EXTENSION */\n\n\n  var BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n  var BINARY_EXTENSION_HEADER_LENGTH = 12;\n  var BINARY_EXTENSION_CHUNK_TYPES = {\n    JSON: 0x4E4F534A,\n    BIN: 0x004E4942\n  };\n\n  function GLTFBinaryExtension(data) {\n    this.name = EXTENSIONS.KHR_BINARY_GLTF;\n    this.content = null;\n    this.body = null;\n    var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n    this.header = {\n      magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n      version: headerView.getUint32(4, true),\n      length: headerView.getUint32(8, true)\n    };\n\n    if (this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC) {\n      throw new Error('THREE.GLTFLoader: Unsupported glTF-Binary header.');\n    } else if (this.header.version < 2.0) {\n      throw new Error('THREE.GLTFLoader: Legacy binary file detected.');\n    }\n\n    var chunkView = new DataView(data, BINARY_EXTENSION_HEADER_LENGTH);\n    var chunkIndex = 0;\n\n    while (chunkIndex < chunkView.byteLength) {\n      var chunkLength = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n      var chunkType = chunkView.getUint32(chunkIndex, true);\n      chunkIndex += 4;\n\n      if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON) {\n        var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength);\n        this.content = THREE.LoaderUtils.decodeText(contentArray);\n      } else if (chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN) {\n        var byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n        this.body = data.slice(byteOffset, byteOffset + chunkLength);\n      } // Clients must ignore chunks with unknown types.\n\n\n      chunkIndex += chunkLength;\n    }\n\n    if (this.content === null) {\n      throw new Error('THREE.GLTFLoader: JSON content not found.');\n    }\n  }\n  /**\n   * DRACO Mesh Compression Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n   */\n\n\n  function GLTFDracoMeshCompressionExtension(json, dracoLoader) {\n    if (!dracoLoader) {\n      throw new Error('THREE.GLTFLoader: No DRACOLoader instance provided.');\n    }\n\n    this.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n    this.json = json;\n    this.dracoLoader = dracoLoader;\n  }\n\n  GLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function (primitive, parser) {\n    var json = this.json;\n    var dracoLoader = this.dracoLoader;\n    var bufferViewIndex = primitive.extensions[this.name].bufferView;\n    var gltfAttributeMap = primitive.extensions[this.name].attributes;\n    var threeAttributeMap = {};\n    var attributeNormalizedMap = {};\n    var attributeTypeMap = {};\n\n    for (var attributeName in gltfAttributeMap) {\n      var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n      threeAttributeMap[threeAttributeName] = gltfAttributeMap[attributeName];\n    }\n\n    for (attributeName in primitive.attributes) {\n      var threeAttributeName = ATTRIBUTES[attributeName] || attributeName.toLowerCase();\n\n      if (gltfAttributeMap[attributeName] !== undefined) {\n        var accessorDef = json.accessors[primitive.attributes[attributeName]];\n        var componentType = WEBGL_COMPONENT_TYPES[accessorDef.componentType];\n        attributeTypeMap[threeAttributeName] = componentType;\n        attributeNormalizedMap[threeAttributeName] = accessorDef.normalized === true;\n      }\n    }\n\n    return parser.getDependency('bufferView', bufferViewIndex).then(function (bufferView) {\n      return new Promise(function (resolve) {\n        dracoLoader.decodeDracoFile(bufferView, function (geometry) {\n          for (var attributeName in geometry.attributes) {\n            var attribute = geometry.attributes[attributeName];\n            var normalized = attributeNormalizedMap[attributeName];\n            if (normalized !== undefined) attribute.normalized = normalized;\n          }\n\n          resolve(geometry);\n        }, threeAttributeMap, attributeTypeMap);\n      });\n    });\n  };\n  /**\n   * Texture Transform Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n   */\n\n\n  function GLTFTextureTransformExtension() {\n    this.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n  }\n\n  GLTFTextureTransformExtension.prototype.extendTexture = function (texture, transform) {\n    texture = texture.clone();\n\n    if (transform.offset !== undefined) {\n      texture.offset.fromArray(transform.offset);\n    }\n\n    if (transform.rotation !== undefined) {\n      texture.rotation = transform.rotation;\n    }\n\n    if (transform.scale !== undefined) {\n      texture.repeat.fromArray(transform.scale);\n    }\n\n    if (transform.texCoord !== undefined) {\n      console.warn('THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.');\n    }\n\n    texture.needsUpdate = true;\n    return texture;\n  };\n  /**\n   * Specular-Glossiness Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n   */\n\n\n  function GLTFMaterialsPbrSpecularGlossinessExtension() {\n    return {\n      name: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n      specularGlossinessParams: ['color', 'map', 'lightMap', 'lightMapIntensity', 'aoMap', 'aoMapIntensity', 'emissive', 'emissiveIntensity', 'emissiveMap', 'bumpMap', 'bumpScale', 'normalMap', 'displacementMap', 'displacementScale', 'displacementBias', 'specularMap', 'specular', 'glossinessMap', 'glossiness', 'alphaMap', 'envMap', 'envMapIntensity', 'refractionRatio'],\n      getMaterialType: function getMaterialType() {\n        return THREE.ShaderMaterial;\n      },\n      extendParams: function extendParams(materialParams, materialDef, parser) {\n        var pbrSpecularGlossiness = materialDef.extensions[this.name];\n        var shader = THREE.ShaderLib['standard'];\n        var uniforms = THREE.UniformsUtils.clone(shader.uniforms);\n        var specularMapParsFragmentChunk = ['#ifdef USE_SPECULARMAP', '\tuniform sampler2D specularMap;', '#endif'].join('\\n');\n        var glossinessMapParsFragmentChunk = ['#ifdef USE_GLOSSINESSMAP', '\tuniform sampler2D glossinessMap;', '#endif'].join('\\n');\n        var specularMapFragmentChunk = ['vec3 specularFactor = specular;', '#ifdef USE_SPECULARMAP', '\tvec4 texelSpecular = texture2D( specularMap, vUv );', '\ttexelSpecular = sRGBToLinear( texelSpecular );', '\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture', '\tspecularFactor *= texelSpecular.rgb;', '#endif'].join('\\n');\n        var glossinessMapFragmentChunk = ['float glossinessFactor = glossiness;', '#ifdef USE_GLOSSINESSMAP', '\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );', '\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture', '\tglossinessFactor *= texelGlossiness.a;', '#endif'].join('\\n');\n        var lightPhysicalFragmentChunk = ['PhysicalMaterial material;', 'material.diffuseColor = diffuseColor.rgb;', 'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );', 'material.specularColor = specularFactor.rgb;'].join('\\n');\n        var fragmentShader = shader.fragmentShader.replace('uniform float roughness;', 'uniform vec3 specular;').replace('uniform float metalness;', 'uniform float glossiness;').replace('#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk).replace('#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk).replace('#include <roughnessmap_fragment>', specularMapFragmentChunk).replace('#include <metalnessmap_fragment>', glossinessMapFragmentChunk).replace('#include <lights_physical_fragment>', lightPhysicalFragmentChunk);\n        delete uniforms.roughness;\n        delete uniforms.metalness;\n        delete uniforms.roughnessMap;\n        delete uniforms.metalnessMap;\n        uniforms.specular = {\n          value: new THREE.Color().setHex(0x111111)\n        };\n        uniforms.glossiness = {\n          value: 0.5\n        };\n        uniforms.specularMap = {\n          value: null\n        };\n        uniforms.glossinessMap = {\n          value: null\n        };\n        materialParams.vertexShader = shader.vertexShader;\n        materialParams.fragmentShader = fragmentShader;\n        materialParams.uniforms = uniforms;\n        materialParams.defines = {\n          'STANDARD': ''\n        };\n        materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n        materialParams.opacity = 1.0;\n        var pending = [];\n\n        if (Array.isArray(pbrSpecularGlossiness.diffuseFactor)) {\n          var array = pbrSpecularGlossiness.diffuseFactor;\n          materialParams.color.fromArray(array);\n          materialParams.opacity = array[3];\n        }\n\n        if (pbrSpecularGlossiness.diffuseTexture !== undefined) {\n          pending.push(parser.assignTexture(materialParams, 'map', pbrSpecularGlossiness.diffuseTexture));\n        }\n\n        materialParams.emissive = new THREE.Color(0.0, 0.0, 0.0);\n        materialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n        materialParams.specular = new THREE.Color(1.0, 1.0, 1.0);\n\n        if (Array.isArray(pbrSpecularGlossiness.specularFactor)) {\n          materialParams.specular.fromArray(pbrSpecularGlossiness.specularFactor);\n        }\n\n        if (pbrSpecularGlossiness.specularGlossinessTexture !== undefined) {\n          var specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n          pending.push(parser.assignTexture(materialParams, 'glossinessMap', specGlossMapDef));\n          pending.push(parser.assignTexture(materialParams, 'specularMap', specGlossMapDef));\n        }\n\n        return Promise.all(pending);\n      },\n      createMaterial: function createMaterial(params) {\n        // setup material properties based on MeshStandardMaterial for Specular-Glossiness\n        var material = new THREE.ShaderMaterial({\n          defines: params.defines,\n          vertexShader: params.vertexShader,\n          fragmentShader: params.fragmentShader,\n          uniforms: params.uniforms,\n          fog: true,\n          lights: true,\n          opacity: params.opacity,\n          transparent: params.transparent\n        });\n        material.isGLTFSpecularGlossinessMaterial = true;\n        material.color = params.color;\n        material.map = params.map === undefined ? null : params.map;\n        material.lightMap = null;\n        material.lightMapIntensity = 1.0;\n        material.aoMap = params.aoMap === undefined ? null : params.aoMap;\n        material.aoMapIntensity = 1.0;\n        material.emissive = params.emissive;\n        material.emissiveIntensity = 1.0;\n        material.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n        material.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n        material.bumpScale = 1;\n        material.normalMap = params.normalMap === undefined ? null : params.normalMap;\n        if (params.normalScale) material.normalScale = params.normalScale;\n        material.displacementMap = null;\n        material.displacementScale = 1;\n        material.displacementBias = 0;\n        material.specularMap = params.specularMap === undefined ? null : params.specularMap;\n        material.specular = params.specular;\n        material.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n        material.glossiness = params.glossiness;\n        material.alphaMap = null;\n        material.envMap = params.envMap === undefined ? null : params.envMap;\n        material.envMapIntensity = 1.0;\n        material.refractionRatio = 0.98;\n        material.extensions.derivatives = true;\n        return material;\n      },\n\n      /**\n       * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n       * copy only properties it knows about or inherits, and misses many properties that would\n       * normally be defined by MeshStandardMaterial.\n       *\n       * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n       * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n       * AND also updating `.onBeforeRender` on the parent mesh.\n       *\n       * @param  {THREE.ShaderMaterial} source\n       * @return {THREE.ShaderMaterial}\n       */\n      cloneMaterial: function cloneMaterial(source) {\n        var target = source.clone();\n        target.isGLTFSpecularGlossinessMaterial = true;\n        var params = this.specularGlossinessParams;\n\n        for (var i = 0, il = params.length; i < il; i++) {\n          var value = source[params[i]];\n          target[params[i]] = value && value.isColor ? value.clone() : value;\n        }\n\n        return target;\n      },\n      // Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n      refreshUniforms: function refreshUniforms(renderer, scene, camera, geometry, material) {\n        if (material.isGLTFSpecularGlossinessMaterial !== true) {\n          return;\n        }\n\n        var uniforms = material.uniforms;\n        var defines = material.defines;\n        uniforms.opacity.value = material.opacity;\n        uniforms.diffuse.value.copy(material.color);\n        uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);\n        uniforms.map.value = material.map;\n        uniforms.specularMap.value = material.specularMap;\n        uniforms.alphaMap.value = material.alphaMap;\n        uniforms.lightMap.value = material.lightMap;\n        uniforms.lightMapIntensity.value = material.lightMapIntensity;\n        uniforms.aoMap.value = material.aoMap;\n        uniforms.aoMapIntensity.value = material.aoMapIntensity; // uv repeat and offset setting priorities\n        // 1. color map\n        // 2. specular map\n        // 3. normal map\n        // 4. bump map\n        // 5. alpha map\n        // 6. emissive map\n\n        var uvScaleMap;\n\n        if (material.map) {\n          uvScaleMap = material.map;\n        } else if (material.specularMap) {\n          uvScaleMap = material.specularMap;\n        } else if (material.displacementMap) {\n          uvScaleMap = material.displacementMap;\n        } else if (material.normalMap) {\n          uvScaleMap = material.normalMap;\n        } else if (material.bumpMap) {\n          uvScaleMap = material.bumpMap;\n        } else if (material.glossinessMap) {\n          uvScaleMap = material.glossinessMap;\n        } else if (material.alphaMap) {\n          uvScaleMap = material.alphaMap;\n        } else if (material.emissiveMap) {\n          uvScaleMap = material.emissiveMap;\n        }\n\n        if (uvScaleMap !== undefined) {\n          // backwards compatibility\n          if (uvScaleMap.isWebGLRenderTarget) {\n            uvScaleMap = uvScaleMap.texture;\n          }\n\n          if (uvScaleMap.matrixAutoUpdate === true) {\n            uvScaleMap.updateMatrix();\n          }\n\n          uniforms.uvTransform.value.copy(uvScaleMap.matrix);\n        }\n\n        if (material.envMap) {\n          uniforms.envMap.value = material.envMap;\n          uniforms.envMapIntensity.value = material.envMapIntensity; // don't flip CubeTexture envMaps, flip everything else:\n          //  WebGLRenderTargetCube will be flipped for backwards compatibility\n          //  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n          // this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\n          uniforms.flipEnvMap.value = material.envMap.isCubeTexture ? -1 : 1;\n          uniforms.reflectivity.value = material.reflectivity;\n          uniforms.refractionRatio.value = material.refractionRatio;\n          uniforms.maxMipLevel.value = renderer.properties.get(material.envMap).__maxMipLevel;\n        }\n\n        uniforms.specular.value.copy(material.specular);\n        uniforms.glossiness.value = material.glossiness;\n        uniforms.glossinessMap.value = material.glossinessMap;\n        uniforms.emissiveMap.value = material.emissiveMap;\n        uniforms.bumpMap.value = material.bumpMap;\n        uniforms.normalMap.value = material.normalMap;\n        uniforms.displacementMap.value = material.displacementMap;\n        uniforms.displacementScale.value = material.displacementScale;\n        uniforms.displacementBias.value = material.displacementBias;\n\n        if (uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined) {\n          defines.USE_GLOSSINESSMAP = ''; // set USE_ROUGHNESSMAP to enable vUv\n\n          defines.USE_ROUGHNESSMAP = '';\n        }\n\n        if (uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined) {\n          delete defines.USE_GLOSSINESSMAP;\n          delete defines.USE_ROUGHNESSMAP;\n        }\n      }\n    };\n  }\n  /**\n   * Mesh Quantization Extension\n   *\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n   */\n\n\n  function GLTFMeshQuantizationExtension() {\n    this.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n  }\n  /*********************************/\n\n  /********** INTERPOLATION ********/\n\n  /*********************************/\n  // Spline Interpolation\n  // Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\n\n  function GLTFCubicSplineInterpolant(parameterPositions, sampleValues, sampleSize, resultBuffer) {\n    THREE.Interpolant.call(this, parameterPositions, sampleValues, sampleSize, resultBuffer);\n  }\n\n  GLTFCubicSplineInterpolant.prototype = Object.create(THREE.Interpolant.prototype);\n  GLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n  GLTFCubicSplineInterpolant.prototype.copySampleValue_ = function (index) {\n    // Copies a sample value to the result buffer. See description of glTF\n    // CUBICSPLINE values layout in interpolate_() function below.\n    var result = this.resultBuffer,\n        values = this.sampleValues,\n        valueSize = this.valueSize,\n        offset = index * valueSize * 3 + valueSize;\n\n    for (var i = 0; i !== valueSize; i++) {\n      result[i] = values[offset + i];\n    }\n\n    return result;\n  };\n\n  GLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n  GLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n  GLTFCubicSplineInterpolant.prototype.interpolate_ = function (i1, t0, t, t1) {\n    var result = this.resultBuffer;\n    var values = this.sampleValues;\n    var stride = this.valueSize;\n    var stride2 = stride * 2;\n    var stride3 = stride * 3;\n    var td = t1 - t0;\n    var p = (t - t0) / td;\n    var pp = p * p;\n    var ppp = pp * p;\n    var offset1 = i1 * stride3;\n    var offset0 = offset1 - stride3;\n    var s2 = -2 * ppp + 3 * pp;\n    var s3 = ppp - pp;\n    var s0 = 1 - s2;\n    var s1 = s3 - pp + p; // Layout of keyframe output values for CUBICSPLINE animations:\n    //   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\n    for (var i = 0; i !== stride; i++) {\n      var p0 = values[offset0 + i + stride]; // splineVertex_k\n\n      var m0 = values[offset0 + i + stride2] * td; // outTangent_k * (t_k+1 - t_k)\n\n      var p1 = values[offset1 + i + stride]; // splineVertex_k+1\n\n      var m1 = values[offset1 + i] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n      result[i] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n    }\n\n    return result;\n  };\n  /*********************************/\n\n  /********** INTERNALS ************/\n\n  /*********************************/\n\n  /* CONSTANTS */\n\n\n  var WEBGL_CONSTANTS = {\n    FLOAT: 5126,\n    //FLOAT_MAT2: 35674,\n    FLOAT_MAT3: 35675,\n    FLOAT_MAT4: 35676,\n    FLOAT_VEC2: 35664,\n    FLOAT_VEC3: 35665,\n    FLOAT_VEC4: 35666,\n    LINEAR: 9729,\n    REPEAT: 10497,\n    SAMPLER_2D: 35678,\n    POINTS: 0,\n    LINES: 1,\n    LINE_LOOP: 2,\n    LINE_STRIP: 3,\n    TRIANGLES: 4,\n    TRIANGLE_STRIP: 5,\n    TRIANGLE_FAN: 6,\n    UNSIGNED_BYTE: 5121,\n    UNSIGNED_SHORT: 5123\n  };\n  var WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array\n  };\n  var WEBGL_FILTERS = {\n    9728: THREE.NearestFilter,\n    9729: THREE.LinearFilter,\n    9984: THREE.NearestMipmapNearestFilter,\n    9985: THREE.LinearMipmapNearestFilter,\n    9986: THREE.NearestMipmapLinearFilter,\n    9987: THREE.LinearMipmapLinearFilter\n  };\n  var WEBGL_WRAPPINGS = {\n    33071: THREE.ClampToEdgeWrapping,\n    33648: THREE.MirroredRepeatWrapping,\n    10497: THREE.RepeatWrapping\n  };\n  var WEBGL_TYPE_SIZES = {\n    'SCALAR': 1,\n    'VEC2': 2,\n    'VEC3': 3,\n    'VEC4': 4,\n    'MAT2': 4,\n    'MAT3': 9,\n    'MAT4': 16\n  };\n  var ATTRIBUTES = {\n    POSITION: 'position',\n    NORMAL: 'normal',\n    TANGENT: 'tangent',\n    TEXCOORD_0: 'uv',\n    TEXCOORD_1: 'uv2',\n    COLOR_0: 'color',\n    WEIGHTS_0: 'skinWeight',\n    JOINTS_0: 'skinIndex'\n  };\n  var PATH_PROPERTIES = {\n    scale: 'scale',\n    translation: 'position',\n    rotation: 'quaternion',\n    weights: 'morphTargetInfluences'\n  };\n  var INTERPOLATION = {\n    CUBICSPLINE: undefined,\n    // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n    // keyframe track will be initialized with a default interpolation type, then modified.\n    LINEAR: THREE.InterpolateLinear,\n    STEP: THREE.InterpolateDiscrete\n  };\n  var ALPHA_MODES = {\n    OPAQUE: 'OPAQUE',\n    MASK: 'MASK',\n    BLEND: 'BLEND'\n  };\n  var MIME_TYPE_FORMATS = {\n    'image/png': THREE.RGBAFormat,\n    'image/jpeg': THREE.RGBFormat\n  };\n  /* UTILITY FUNCTIONS */\n\n  function resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '') return ''; // Host Relative URL\n\n    if (/^https?:\\/\\//i.test(path) && /^\\//.test(url)) {\n      path = path.replace(/(^https?:\\/\\/[^\\/]+).*/i, '$1');\n    } // Absolute URL http://,https://,//\n\n\n    if (/^(https?:)?\\/\\//i.test(url)) return url; // Data URI\n\n    if (/^data:.*,.*$/i.test(url)) return url; // Blob URL\n\n    if (/^blob:.*$/i.test(url)) return url; // Relative URL\n\n    return path + url;\n  }\n\n  var defaultMaterial;\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n   */\n\n  function createDefaultMaterial() {\n    defaultMaterial = defaultMaterial || new THREE.MeshStandardMaterial({\n      color: 0xFFFFFF,\n      emissive: 0x000000,\n      metalness: 1,\n      roughness: 1,\n      transparent: false,\n      depthTest: true,\n      side: THREE.FrontSide\n    });\n    return defaultMaterial;\n  }\n\n  function addUnknownExtensionsToUserData(knownExtensions, object, objectDef) {\n    // Add unknown glTF extensions to an object's userData.\n    for (var name in objectDef.extensions) {\n      if (knownExtensions[name] === undefined) {\n        object.userData.gltfExtensions = object.userData.gltfExtensions || {};\n        object.userData.gltfExtensions[name] = objectDef.extensions[name];\n      }\n    }\n  }\n  /**\n   * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n   * @param {GLTF.definition} gltfDef\n   */\n\n\n  function assignExtrasToUserData(object, gltfDef) {\n    if (gltfDef.extras !== undefined) {\n      if (typeof gltfDef.extras === 'object') {\n        Object.assign(object.userData, gltfDef.extras);\n      } else {\n        console.warn('THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras);\n      }\n    }\n  }\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n   *\n   * @param {THREE.BufferGeometry} geometry\n   * @param {Array<GLTF.Target>} targets\n   * @param {GLTFParser} parser\n   * @return {Promise<THREE.BufferGeometry>}\n   */\n\n\n  function addMorphTargets(geometry, targets, parser) {\n    var hasMorphPosition = false;\n    var hasMorphNormal = false;\n\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n      if (target.POSITION !== undefined) hasMorphPosition = true;\n      if (target.NORMAL !== undefined) hasMorphNormal = true;\n      if (hasMorphPosition && hasMorphNormal) break;\n    }\n\n    if (!hasMorphPosition && !hasMorphNormal) return Promise.resolve(geometry);\n    var pendingPositionAccessors = [];\n    var pendingNormalAccessors = [];\n\n    for (var i = 0, il = targets.length; i < il; i++) {\n      var target = targets[i];\n\n      if (hasMorphPosition) {\n        var pendingAccessor = target.POSITION !== undefined ? parser.getDependency('accessor', target.POSITION) : geometry.attributes.position;\n        pendingPositionAccessors.push(pendingAccessor);\n      }\n\n      if (hasMorphNormal) {\n        var pendingAccessor = target.NORMAL !== undefined ? parser.getDependency('accessor', target.NORMAL) : geometry.attributes.normal;\n        pendingNormalAccessors.push(pendingAccessor);\n      }\n    }\n\n    return Promise.all([Promise.all(pendingPositionAccessors), Promise.all(pendingNormalAccessors)]).then(function (accessors) {\n      var morphPositions = accessors[0];\n      var morphNormals = accessors[1];\n      if (hasMorphPosition) geometry.morphAttributes.position = morphPositions;\n      if (hasMorphNormal) geometry.morphAttributes.normal = morphNormals;\n      geometry.morphTargetsRelative = true;\n      return geometry;\n    });\n  }\n  /**\n   * @param {THREE.Mesh} mesh\n   * @param {GLTF.Mesh} meshDef\n   */\n\n\n  function updateMorphTargets(mesh, meshDef) {\n    mesh.updateMorphTargets();\n\n    if (meshDef.weights !== undefined) {\n      for (var i = 0, il = meshDef.weights.length; i < il; i++) {\n        mesh.morphTargetInfluences[i] = meshDef.weights[i];\n      }\n    } // .extras has user-defined data, so check that .extras.targetNames is an array.\n\n\n    if (meshDef.extras && Array.isArray(meshDef.extras.targetNames)) {\n      var targetNames = meshDef.extras.targetNames;\n\n      if (mesh.morphTargetInfluences.length === targetNames.length) {\n        mesh.morphTargetDictionary = {};\n\n        for (var i = 0, il = targetNames.length; i < il; i++) {\n          mesh.morphTargetDictionary[targetNames[i]] = i;\n        }\n      } else {\n        console.warn('THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.');\n      }\n    }\n  }\n\n  function createPrimitiveKey(primitiveDef) {\n    var dracoExtension = primitiveDef.extensions && primitiveDef.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION];\n    var geometryKey;\n\n    if (dracoExtension) {\n      geometryKey = 'draco:' + dracoExtension.bufferView + ':' + dracoExtension.indices + ':' + createAttributesKey(dracoExtension.attributes);\n    } else {\n      geometryKey = primitiveDef.indices + ':' + createAttributesKey(primitiveDef.attributes) + ':' + primitiveDef.mode;\n    }\n\n    return geometryKey;\n  }\n\n  function createAttributesKey(attributes) {\n    var attributesKey = '';\n    var keys = Object.keys(attributes).sort();\n\n    for (var i = 0, il = keys.length; i < il; i++) {\n      attributesKey += keys[i] + ':' + attributes[keys[i]] + ';';\n    }\n\n    return attributesKey;\n  }\n  /* GLTF PARSER */\n\n\n  function GLTFParser(json, extensions, options) {\n    this.json = json || {};\n    this.extensions = extensions || {};\n    this.options = options || {}; // loader object cache\n\n    this.cache = new GLTFRegistry(); // BufferGeometry caching\n\n    this.primitiveCache = {};\n    this.textureLoader = new THREE.TextureLoader(this.options.manager);\n    this.textureLoader.setCrossOrigin(this.options.crossOrigin);\n    this.fileLoader = new THREE.FileLoader(this.options.manager);\n    this.fileLoader.setResponseType('arraybuffer');\n\n    if (this.options.crossOrigin === 'use-credentials') {\n      this.fileLoader.setWithCredentials(true);\n    }\n  }\n\n  GLTFParser.prototype.parse = function (onLoad, onError) {\n    var parser = this;\n    var json = this.json;\n    var extensions = this.extensions; // Clear the loader cache\n\n    this.cache.removeAll(); // Mark the special nodes/meshes in json for efficient parse\n\n    this.markDefs();\n    Promise.all([this.getDependencies('scene'), this.getDependencies('animation'), this.getDependencies('camera')]).then(function (dependencies) {\n      var result = {\n        scene: dependencies[0][json.scene || 0],\n        scenes: dependencies[0],\n        animations: dependencies[1],\n        cameras: dependencies[2],\n        asset: json.asset,\n        parser: parser,\n        userData: {}\n      };\n      addUnknownExtensionsToUserData(extensions, result, json);\n      assignExtrasToUserData(result, json);\n      onLoad(result);\n    })[\"catch\"](onError);\n  };\n  /**\n   * Marks the special nodes/meshes in json for efficient parse.\n   */\n\n\n  GLTFParser.prototype.markDefs = function () {\n    var nodeDefs = this.json.nodes || [];\n    var skinDefs = this.json.skins || [];\n    var meshDefs = this.json.meshes || [];\n    var meshReferences = {};\n    var meshUses = {}; // Nothing in the node definition indicates whether it is a Bone or an\n    // Object3D. Use the skins' joint references to mark bones.\n\n    for (var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex++) {\n      var joints = skinDefs[skinIndex].joints;\n\n      for (var i = 0, il = joints.length; i < il; i++) {\n        nodeDefs[joints[i]].isBone = true;\n      }\n    } // Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n    // avoid having more than one THREE.Mesh with the same name, count\n    // references and rename instances below.\n    //\n    // Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\n\n    for (var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex++) {\n      var nodeDef = nodeDefs[nodeIndex];\n\n      if (nodeDef.mesh !== undefined) {\n        if (meshReferences[nodeDef.mesh] === undefined) {\n          meshReferences[nodeDef.mesh] = meshUses[nodeDef.mesh] = 0;\n        }\n\n        meshReferences[nodeDef.mesh]++; // Nothing in the mesh definition indicates whether it is\n        // a SkinnedMesh or Mesh. Use the node's mesh reference\n        // to mark SkinnedMesh if node has skin.\n\n        if (nodeDef.skin !== undefined) {\n          meshDefs[nodeDef.mesh].isSkinnedMesh = true;\n        }\n      }\n    }\n\n    this.json.meshReferences = meshReferences;\n    this.json.meshUses = meshUses;\n  };\n  /**\n   * Requests the specified dependency asynchronously, with caching.\n   * @param {string} type\n   * @param {number} index\n   * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n   */\n\n\n  GLTFParser.prototype.getDependency = function (type, index) {\n    var cacheKey = type + ':' + index;\n    var dependency = this.cache.get(cacheKey);\n\n    if (!dependency) {\n      switch (type) {\n        case 'scene':\n          dependency = this.loadScene(index);\n          break;\n\n        case 'node':\n          dependency = this.loadNode(index);\n          break;\n\n        case 'mesh':\n          dependency = this.loadMesh(index);\n          break;\n\n        case 'accessor':\n          dependency = this.loadAccessor(index);\n          break;\n\n        case 'bufferView':\n          dependency = this.loadBufferView(index);\n          break;\n\n        case 'buffer':\n          dependency = this.loadBuffer(index);\n          break;\n\n        case 'material':\n          dependency = this.loadMaterial(index);\n          break;\n\n        case 'texture':\n          dependency = this.loadTexture(index);\n          break;\n\n        case 'skin':\n          dependency = this.loadSkin(index);\n          break;\n\n        case 'animation':\n          dependency = this.loadAnimation(index);\n          break;\n\n        case 'camera':\n          dependency = this.loadCamera(index);\n          break;\n\n        case 'light':\n          dependency = this.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].loadLight(index);\n          break;\n\n        default:\n          throw new Error('Unknown type: ' + type);\n      }\n\n      this.cache.add(cacheKey, dependency);\n    }\n\n    return dependency;\n  };\n  /**\n   * Requests all dependencies of the specified type asynchronously, with caching.\n   * @param {string} type\n   * @return {Promise<Array<Object>>}\n   */\n\n\n  GLTFParser.prototype.getDependencies = function (type) {\n    var dependencies = this.cache.get(type);\n\n    if (!dependencies) {\n      var parser = this;\n      var defs = this.json[type + (type === 'mesh' ? 'es' : 's')] || [];\n      dependencies = Promise.all(defs.map(function (def, index) {\n        return parser.getDependency(type, index);\n      }));\n      this.cache.add(type, dependencies);\n    }\n\n    return dependencies;\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n\n\n  GLTFParser.prototype.loadBuffer = function (bufferIndex) {\n    var bufferDef = this.json.buffers[bufferIndex];\n    var loader = this.fileLoader;\n\n    if (bufferDef.type && bufferDef.type !== 'arraybuffer') {\n      throw new Error('THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.');\n    } // If present, GLB container is required to be the first buffer.\n\n\n    if (bufferDef.uri === undefined && bufferIndex === 0) {\n      return Promise.resolve(this.extensions[EXTENSIONS.KHR_BINARY_GLTF].body);\n    }\n\n    var options = this.options;\n    return new Promise(function (resolve, reject) {\n      loader.load(resolveURL(bufferDef.uri, options.path), resolve, undefined, function () {\n        reject(new Error('THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".'));\n      });\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n   * @param {number} bufferViewIndex\n   * @return {Promise<ArrayBuffer>}\n   */\n\n\n  GLTFParser.prototype.loadBufferView = function (bufferViewIndex) {\n    var bufferViewDef = this.json.bufferViews[bufferViewIndex];\n    return this.getDependency('buffer', bufferViewDef.buffer).then(function (buffer) {\n      var byteLength = bufferViewDef.byteLength || 0;\n      var byteOffset = bufferViewDef.byteOffset || 0;\n      return buffer.slice(byteOffset, byteOffset + byteLength);\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n   * @param {number} accessorIndex\n   * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n   */\n\n\n  GLTFParser.prototype.loadAccessor = function (accessorIndex) {\n    var parser = this;\n    var json = this.json;\n    var accessorDef = this.json.accessors[accessorIndex];\n\n    if (accessorDef.bufferView === undefined && accessorDef.sparse === undefined) {\n      // Ignore empty accessors, which may be used to declare runtime\n      // information about attributes coming from another source (e.g. Draco\n      // compression extension).\n      return Promise.resolve(null);\n    }\n\n    var pendingBufferViews = [];\n\n    if (accessorDef.bufferView !== undefined) {\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.bufferView));\n    } else {\n      pendingBufferViews.push(null);\n    }\n\n    if (accessorDef.sparse !== undefined) {\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.indices.bufferView));\n      pendingBufferViews.push(this.getDependency('bufferView', accessorDef.sparse.values.bufferView));\n    }\n\n    return Promise.all(pendingBufferViews).then(function (bufferViews) {\n      var bufferView = bufferViews[0];\n      var itemSize = WEBGL_TYPE_SIZES[accessorDef.type];\n      var TypedArray = WEBGL_COMPONENT_TYPES[accessorDef.componentType]; // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\n      var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n      var itemBytes = elementBytes * itemSize;\n      var byteOffset = accessorDef.byteOffset || 0;\n      var byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[accessorDef.bufferView].byteStride : undefined;\n      var normalized = accessorDef.normalized === true;\n      var array, bufferAttribute; // The buffer is not interleaved if the stride is the item size in bytes.\n\n      if (byteStride && byteStride !== itemBytes) {\n        // Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n        // This makes sure that IBA.count reflects accessor.count properly\n        var ibSlice = Math.floor(byteOffset / byteStride);\n        var ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n        var ib = parser.cache.get(ibCacheKey);\n\n        if (!ib) {\n          array = new TypedArray(bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes); // Integer parameters to IB/IBA are in array elements, not bytes.\n\n          ib = new THREE.InterleavedBuffer(array, byteStride / elementBytes);\n          parser.cache.add(ibCacheKey, ib);\n        }\n\n        bufferAttribute = new THREE.InterleavedBufferAttribute(ib, itemSize, byteOffset % byteStride / elementBytes, normalized);\n      } else {\n        if (bufferView === null) {\n          array = new TypedArray(accessorDef.count * itemSize);\n        } else {\n          array = new TypedArray(bufferView, byteOffset, accessorDef.count * itemSize);\n        }\n\n        bufferAttribute = new THREE.BufferAttribute(array, itemSize, normalized);\n      } // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\n\n      if (accessorDef.sparse !== undefined) {\n        var itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n        var TypedArrayIndices = WEBGL_COMPONENT_TYPES[accessorDef.sparse.indices.componentType];\n        var byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n        var byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n        var sparseIndices = new TypedArrayIndices(bufferViews[1], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices);\n        var sparseValues = new TypedArray(bufferViews[2], byteOffsetValues, accessorDef.sparse.count * itemSize);\n\n        if (bufferView !== null) {\n          // Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n          bufferAttribute = new THREE.BufferAttribute(bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized);\n        }\n\n        for (var i = 0, il = sparseIndices.length; i < il; i++) {\n          var index = sparseIndices[i];\n          bufferAttribute.setX(index, sparseValues[i * itemSize]);\n          if (itemSize >= 2) bufferAttribute.setY(index, sparseValues[i * itemSize + 1]);\n          if (itemSize >= 3) bufferAttribute.setZ(index, sparseValues[i * itemSize + 2]);\n          if (itemSize >= 4) bufferAttribute.setW(index, sparseValues[i * itemSize + 3]);\n          if (itemSize >= 5) throw new Error('THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.');\n        }\n      }\n\n      return bufferAttribute;\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n   * @param {number} textureIndex\n   * @return {Promise<THREE.Texture>}\n   */\n\n\n  GLTFParser.prototype.loadTexture = function (textureIndex) {\n    var parser = this;\n    var json = this.json;\n    var options = this.options;\n    var textureLoader = this.textureLoader;\n    var URL = window.URL || window.webkitURL;\n    var textureDef = json.textures[textureIndex];\n    var textureExtensions = textureDef.extensions || {};\n    var source;\n\n    if (textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS]) {\n      source = json.images[textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS].source];\n    } else {\n      source = json.images[textureDef.source];\n    }\n\n    var sourceURI = source.uri;\n    var isObjectURL = false;\n\n    if (source.bufferView !== undefined) {\n      // Load binary image data from bufferView, if provided.\n      sourceURI = parser.getDependency('bufferView', source.bufferView).then(function (bufferView) {\n        isObjectURL = true;\n        var blob = new Blob([bufferView], {\n          type: source.mimeType\n        });\n        sourceURI = URL.createObjectURL(blob);\n        return sourceURI;\n      });\n    }\n\n    return Promise.resolve(sourceURI).then(function (sourceURI) {\n      // Load Texture resource.\n      var loader = options.manager.getHandler(sourceURI);\n\n      if (!loader) {\n        loader = textureExtensions[EXTENSIONS.MSFT_TEXTURE_DDS] ? parser.extensions[EXTENSIONS.MSFT_TEXTURE_DDS].ddsLoader : textureLoader;\n      }\n\n      return new Promise(function (resolve, reject) {\n        loader.load(resolveURL(sourceURI, options.path), resolve, undefined, reject);\n      });\n    }).then(function (texture) {\n      // Clean up resources and configure Texture.\n      if (isObjectURL === true) {\n        URL.revokeObjectURL(sourceURI);\n      }\n\n      texture.flipY = false;\n      if (textureDef.name !== undefined) texture.name = textureDef.name; // Ignore unknown mime types, like DDS files.\n\n      if (source.mimeType in MIME_TYPE_FORMATS) {\n        texture.format = MIME_TYPE_FORMATS[source.mimeType];\n      }\n\n      var samplers = json.samplers || {};\n      var sampler = samplers[textureDef.sampler] || {};\n      texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n      texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.LinearMipmapLinearFilter;\n      texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n      texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n      return texture;\n    });\n  };\n  /**\n   * Asynchronously assigns a texture to the given material parameters.\n   * @param {Object} materialParams\n   * @param {string} mapName\n   * @param {Object} mapDef\n   * @return {Promise}\n   */\n\n\n  GLTFParser.prototype.assignTexture = function (materialParams, mapName, mapDef) {\n    var parser = this;\n    return this.getDependency('texture', mapDef.index).then(function (texture) {\n      if (!texture.isCompressedTexture) {\n        switch (mapName) {\n          case 'aoMap':\n          case 'emissiveMap':\n          case 'metalnessMap':\n          case 'normalMap':\n          case 'roughnessMap':\n            texture.format = THREE.RGBFormat;\n            break;\n        }\n      }\n\n      if (parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM]) {\n        var transform = mapDef.extensions !== undefined ? mapDef.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM] : undefined;\n\n        if (transform) {\n          texture = parser.extensions[EXTENSIONS.KHR_TEXTURE_TRANSFORM].extendTexture(texture, transform);\n        }\n      }\n\n      materialParams[mapName] = texture;\n    });\n  };\n  /**\n   * Assigns final material to a Mesh, Line, or Points instance. The instance\n   * already has a material (generated from the glTF material options alone)\n   * but reuse of the same glTF material may require multiple threejs materials\n   * to accomodate different primitive types, defines, etc. New materials will\n   * be created if necessary, and reused from a cache.\n   * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n   */\n\n\n  GLTFParser.prototype.assignFinalMaterial = function (mesh) {\n    var geometry = mesh.geometry;\n    var material = mesh.material;\n    var extensions = this.extensions;\n    var useVertexTangents = geometry.attributes.tangent !== undefined;\n    var useVertexColors = geometry.attributes.color !== undefined;\n    var useFlatShading = geometry.attributes.normal === undefined;\n    var useSkinning = mesh.isSkinnedMesh === true;\n    var useMorphTargets = Object.keys(geometry.morphAttributes).length > 0;\n    var useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n    if (mesh.isPoints) {\n      var cacheKey = 'PointsMaterial:' + material.uuid;\n      var pointsMaterial = this.cache.get(cacheKey);\n\n      if (!pointsMaterial) {\n        pointsMaterial = new THREE.PointsMaterial();\n        THREE.Material.prototype.copy.call(pointsMaterial, material);\n        pointsMaterial.color.copy(material.color);\n        pointsMaterial.map = material.map;\n        pointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n        this.cache.add(cacheKey, pointsMaterial);\n      }\n\n      material = pointsMaterial;\n    } else if (mesh.isLine) {\n      var cacheKey = 'LineBasicMaterial:' + material.uuid;\n      var lineMaterial = this.cache.get(cacheKey);\n\n      if (!lineMaterial) {\n        lineMaterial = new THREE.LineBasicMaterial();\n        THREE.Material.prototype.copy.call(lineMaterial, material);\n        lineMaterial.color.copy(material.color);\n        this.cache.add(cacheKey, lineMaterial);\n      }\n\n      material = lineMaterial;\n    } // Clone the material if it will be modified\n\n\n    if (useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets) {\n      var cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n      if (material.isGLTFSpecularGlossinessMaterial) cacheKey += 'specular-glossiness:';\n      if (useSkinning) cacheKey += 'skinning:';\n      if (useVertexTangents) cacheKey += 'vertex-tangents:';\n      if (useVertexColors) cacheKey += 'vertex-colors:';\n      if (useFlatShading) cacheKey += 'flat-shading:';\n      if (useMorphTargets) cacheKey += 'morph-targets:';\n      if (useMorphNormals) cacheKey += 'morph-normals:';\n      var cachedMaterial = this.cache.get(cacheKey);\n\n      if (!cachedMaterial) {\n        cachedMaterial = material.isGLTFSpecularGlossinessMaterial ? extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].cloneMaterial(material) : material.clone();\n        if (useSkinning) cachedMaterial.skinning = true;\n        if (useVertexTangents) cachedMaterial.vertexTangents = true;\n        if (useVertexColors) cachedMaterial.vertexColors = THREE.VertexColors;\n        if (useFlatShading) cachedMaterial.flatShading = true;\n        if (useMorphTargets) cachedMaterial.morphTargets = true;\n        if (useMorphNormals) cachedMaterial.morphNormals = true;\n        this.cache.add(cacheKey, cachedMaterial);\n      }\n\n      material = cachedMaterial;\n    } // workarounds for mesh and geometry\n\n\n    if (material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined) {\n      console.log('THREE.GLTFLoader: Duplicating UVs to support aoMap.');\n      geometry.setAttribute('uv2', new THREE.BufferAttribute(geometry.attributes.uv.array, 2));\n    }\n\n    if (material.isGLTFSpecularGlossinessMaterial) {\n      // for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n      mesh.onBeforeRender = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].refreshUniforms;\n    }\n\n    mesh.material = material;\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n   * @param {number} materialIndex\n   * @return {Promise<THREE.Material>}\n   */\n\n\n  GLTFParser.prototype.loadMaterial = function (materialIndex) {\n    var parser = this;\n    var json = this.json;\n    var extensions = this.extensions;\n    var materialDef = json.materials[materialIndex];\n    var materialType;\n    var materialParams = {};\n    var materialExtensions = materialDef.extensions || {};\n    var pending = [];\n\n    if (materialExtensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS]) {\n      var sgExtension = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS];\n      materialType = sgExtension.getMaterialType();\n      pending.push(sgExtension.extendParams(materialParams, materialDef, parser));\n    } else if (materialExtensions[EXTENSIONS.KHR_MATERIALS_UNLIT]) {\n      var kmuExtension = extensions[EXTENSIONS.KHR_MATERIALS_UNLIT];\n      materialType = kmuExtension.getMaterialType();\n      pending.push(kmuExtension.extendParams(materialParams, materialDef, parser));\n    } else {\n      // Specification:\n      // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n      materialType = THREE.MeshStandardMaterial;\n      var metallicRoughness = materialDef.pbrMetallicRoughness || {};\n      materialParams.color = new THREE.Color(1.0, 1.0, 1.0);\n      materialParams.opacity = 1.0;\n\n      if (Array.isArray(metallicRoughness.baseColorFactor)) {\n        var array = metallicRoughness.baseColorFactor;\n        materialParams.color.fromArray(array);\n        materialParams.opacity = array[3];\n      }\n\n      if (metallicRoughness.baseColorTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'map', metallicRoughness.baseColorTexture));\n      }\n\n      materialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n      materialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n      if (metallicRoughness.metallicRoughnessTexture !== undefined) {\n        pending.push(parser.assignTexture(materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture));\n        pending.push(parser.assignTexture(materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture));\n      }\n    }\n\n    if (materialDef.doubleSided === true) {\n      materialParams.side = THREE.DoubleSide;\n    }\n\n    var alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n    if (alphaMode === ALPHA_MODES.BLEND) {\n      materialParams.transparent = true;\n    } else {\n      materialParams.transparent = false;\n\n      if (alphaMode === ALPHA_MODES.MASK) {\n        materialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n      }\n    }\n\n    if (materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'normalMap', materialDef.normalTexture));\n      materialParams.normalScale = new THREE.Vector2(1, 1);\n\n      if (materialDef.normalTexture.scale !== undefined) {\n        materialParams.normalScale.set(materialDef.normalTexture.scale, materialDef.normalTexture.scale);\n      }\n    }\n\n    if (materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'aoMap', materialDef.occlusionTexture));\n\n      if (materialDef.occlusionTexture.strength !== undefined) {\n        materialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n      }\n    }\n\n    if (materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      materialParams.emissive = new THREE.Color().fromArray(materialDef.emissiveFactor);\n    }\n\n    if (materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial) {\n      pending.push(parser.assignTexture(materialParams, 'emissiveMap', materialDef.emissiveTexture));\n    }\n\n    return Promise.all(pending).then(function () {\n      var material;\n\n      if (materialType === THREE.ShaderMaterial) {\n        material = extensions[EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS].createMaterial(materialParams);\n      } else {\n        material = new materialType(materialParams);\n      }\n\n      if (materialDef.name !== undefined) material.name = materialDef.name; // baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\n      if (material.map) material.map.encoding = THREE.sRGBEncoding;\n      if (material.emissiveMap) material.emissiveMap.encoding = THREE.sRGBEncoding;\n      if (material.specularMap) material.specularMap.encoding = THREE.sRGBEncoding;\n      assignExtrasToUserData(material, materialDef);\n      if (materialDef.extensions) addUnknownExtensionsToUserData(extensions, material, materialDef);\n      return material;\n    });\n  };\n  /**\n   * @param {THREE.BufferGeometry} geometry\n   * @param {GLTF.Primitive} primitiveDef\n   * @param {GLTFParser} parser\n   */\n\n\n  function computeBounds(geometry, primitiveDef, parser) {\n    var attributes = primitiveDef.attributes;\n    var box = new THREE.Box3();\n\n    if (attributes.POSITION !== undefined) {\n      var accessor = parser.json.accessors[attributes.POSITION];\n      var min = accessor.min;\n      var max = accessor.max;\n      box.set(new THREE.Vector3(min[0], min[1], min[2]), new THREE.Vector3(max[0], max[1], max[2]));\n    } else {\n      return;\n    }\n\n    var targets = primitiveDef.targets;\n\n    if (targets !== undefined) {\n      var vector = new THREE.Vector3();\n\n      for (var i = 0, il = targets.length; i < il; i++) {\n        var target = targets[i];\n\n        if (target.POSITION !== undefined) {\n          var accessor = parser.json.accessors[target.POSITION];\n          var min = accessor.min;\n          var max = accessor.max; // we need to get max of absolute components because target weight is [-1,1]\n\n          vector.setX(Math.max(Math.abs(min[0]), Math.abs(max[0])));\n          vector.setY(Math.max(Math.abs(min[1]), Math.abs(max[1])));\n          vector.setZ(Math.max(Math.abs(min[2]), Math.abs(max[2])));\n          box.expandByVector(vector);\n        }\n      }\n    }\n\n    geometry.boundingBox = box;\n    var sphere = new THREE.Sphere();\n    box.getCenter(sphere.center);\n    sphere.radius = box.min.distanceTo(box.max) / 2;\n    geometry.boundingSphere = sphere;\n  }\n  /**\n   * @param {THREE.BufferGeometry} geometry\n   * @param {GLTF.Primitive} primitiveDef\n   * @param {GLTFParser} parser\n   * @return {Promise<THREE.BufferGeometry>}\n   */\n\n\n  function addPrimitiveAttributes(geometry, primitiveDef, parser) {\n    var attributes = primitiveDef.attributes;\n    var pending = [];\n\n    function assignAttributeAccessor(accessorIndex, attributeName) {\n      return parser.getDependency('accessor', accessorIndex).then(function (accessor) {\n        geometry.setAttribute(attributeName, accessor);\n      });\n    }\n\n    for (var gltfAttributeName in attributes) {\n      var threeAttributeName = ATTRIBUTES[gltfAttributeName] || gltfAttributeName.toLowerCase(); // Skip attributes already provided by e.g. Draco extension.\n\n      if (threeAttributeName in geometry.attributes) continue;\n      pending.push(assignAttributeAccessor(attributes[gltfAttributeName], threeAttributeName));\n    }\n\n    if (primitiveDef.indices !== undefined && !geometry.index) {\n      var accessor = parser.getDependency('accessor', primitiveDef.indices).then(function (accessor) {\n        geometry.setIndex(accessor);\n      });\n      pending.push(accessor);\n    }\n\n    assignExtrasToUserData(geometry, primitiveDef);\n    computeBounds(geometry, primitiveDef, parser);\n    return Promise.all(pending).then(function () {\n      return primitiveDef.targets !== undefined ? addMorphTargets(geometry, primitiveDef.targets, parser) : geometry;\n    });\n  }\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n   *\n   * Creates BufferGeometries from primitives.\n   *\n   * @param {Array<GLTF.Primitive>} primitives\n   * @return {Promise<Array<THREE.BufferGeometry>>}\n   */\n\n\n  GLTFParser.prototype.loadGeometries = function (primitives) {\n    var parser = this;\n    var extensions = this.extensions;\n    var cache = this.primitiveCache;\n\n    function createDracoPrimitive(primitive) {\n      return extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION].decodePrimitive(primitive, parser).then(function (geometry) {\n        return addPrimitiveAttributes(geometry, primitive, parser);\n      });\n    }\n\n    var pending = [];\n\n    for (var i = 0, il = primitives.length; i < il; i++) {\n      var primitive = primitives[i];\n      var cacheKey = createPrimitiveKey(primitive); // See if we've already created this geometry\n\n      var cached = cache[cacheKey];\n\n      if (cached) {\n        // Use the cached geometry if it exists\n        pending.push(cached.promise);\n      } else {\n        var geometryPromise;\n\n        if (primitive.extensions && primitive.extensions[EXTENSIONS.KHR_DRACO_MESH_COMPRESSION]) {\n          // Use DRACO geometry if available\n          geometryPromise = createDracoPrimitive(primitive);\n        } else {\n          // Otherwise create a new geometry\n          geometryPromise = addPrimitiveAttributes(new THREE.BufferGeometry(), primitive, parser);\n        } // Cache this geometry\n\n\n        cache[cacheKey] = {\n          primitive: primitive,\n          promise: geometryPromise\n        };\n        pending.push(geometryPromise);\n      }\n    }\n\n    return Promise.all(pending);\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n   * @param {number} meshIndex\n   * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n   */\n\n\n  GLTFParser.prototype.loadMesh = function (meshIndex) {\n    var parser = this;\n    var json = this.json;\n    var meshDef = json.meshes[meshIndex];\n    var primitives = meshDef.primitives;\n    var pending = [];\n\n    for (var i = 0, il = primitives.length; i < il; i++) {\n      var material = primitives[i].material === undefined ? createDefaultMaterial() : this.getDependency('material', primitives[i].material);\n      pending.push(material);\n    }\n\n    return Promise.all(pending).then(function (originalMaterials) {\n      return parser.loadGeometries(primitives).then(function (geometries) {\n        var meshes = [];\n\n        for (var i = 0, il = geometries.length; i < il; i++) {\n          var geometry = geometries[i];\n          var primitive = primitives[i]; // 1. create Mesh\n\n          var mesh;\n          var material = originalMaterials[i];\n\n          if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP || primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN || primitive.mode === undefined) {\n            // .isSkinnedMesh isn't in glTF spec. See .markDefs()\n            mesh = meshDef.isSkinnedMesh === true ? new THREE.SkinnedMesh(geometry, material) : new THREE.Mesh(geometry, material);\n\n            if (mesh.isSkinnedMesh === true && !mesh.geometry.attributes.skinWeight.normalized) {\n              // we normalize floating point skin weight array to fix malformed assets (see #15319)\n              // it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n              mesh.normalizeSkinWeights();\n            }\n\n            if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP) {\n              mesh.drawMode = THREE.TriangleStripDrawMode;\n            } else if (primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN) {\n              mesh.drawMode = THREE.TriangleFanDrawMode;\n            }\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n            mesh = new THREE.LineSegments(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_STRIP) {\n            mesh = new THREE.Line(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINE_LOOP) {\n            mesh = new THREE.LineLoop(geometry, material);\n          } else if (primitive.mode === WEBGL_CONSTANTS.POINTS) {\n            mesh = new THREE.Points(geometry, material);\n          } else {\n            throw new Error('THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode);\n          }\n\n          if (Object.keys(mesh.geometry.morphAttributes).length > 0) {\n            updateMorphTargets(mesh, meshDef);\n          }\n\n          mesh.name = meshDef.name || 'mesh_' + meshIndex;\n          if (geometries.length > 1) mesh.name += '_' + i;\n          assignExtrasToUserData(mesh, meshDef);\n          parser.assignFinalMaterial(mesh);\n          meshes.push(mesh);\n        }\n\n        if (meshes.length === 1) {\n          return meshes[0];\n        }\n\n        var group = new THREE.Group();\n\n        for (var i = 0, il = meshes.length; i < il; i++) {\n          group.add(meshes[i]);\n        }\n\n        return group;\n      });\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n   * @param {number} cameraIndex\n   * @return {Promise<THREE.Camera>}\n   */\n\n\n  GLTFParser.prototype.loadCamera = function (cameraIndex) {\n    var camera;\n    var cameraDef = this.json.cameras[cameraIndex];\n    var params = cameraDef[cameraDef.type];\n\n    if (!params) {\n      console.warn('THREE.GLTFLoader: Missing camera parameters.');\n      return;\n    }\n\n    if (cameraDef.type === 'perspective') {\n      camera = new THREE.PerspectiveCamera(THREE.Math.radToDeg(params.yfov), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6);\n    } else if (cameraDef.type === 'orthographic') {\n      camera = new THREE.OrthographicCamera(params.xmag / -2, params.xmag / 2, params.ymag / 2, params.ymag / -2, params.znear, params.zfar);\n    }\n\n    if (cameraDef.name !== undefined) camera.name = cameraDef.name;\n    assignExtrasToUserData(camera, cameraDef);\n    return Promise.resolve(camera);\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n   * @param {number} skinIndex\n   * @return {Promise<Object>}\n   */\n\n\n  GLTFParser.prototype.loadSkin = function (skinIndex) {\n    var skinDef = this.json.skins[skinIndex];\n    var skinEntry = {\n      joints: skinDef.joints\n    };\n\n    if (skinDef.inverseBindMatrices === undefined) {\n      return Promise.resolve(skinEntry);\n    }\n\n    return this.getDependency('accessor', skinDef.inverseBindMatrices).then(function (accessor) {\n      skinEntry.inverseBindMatrices = accessor;\n      return skinEntry;\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n   * @param {number} animationIndex\n   * @return {Promise<THREE.AnimationClip>}\n   */\n\n\n  GLTFParser.prototype.loadAnimation = function (animationIndex) {\n    var json = this.json;\n    var animationDef = json.animations[animationIndex];\n    var pendingNodes = [];\n    var pendingInputAccessors = [];\n    var pendingOutputAccessors = [];\n    var pendingSamplers = [];\n    var pendingTargets = [];\n\n    for (var i = 0, il = animationDef.channels.length; i < il; i++) {\n      var channel = animationDef.channels[i];\n      var sampler = animationDef.samplers[channel.sampler];\n      var target = channel.target;\n      var name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\n      var input = animationDef.parameters !== undefined ? animationDef.parameters[sampler.input] : sampler.input;\n      var output = animationDef.parameters !== undefined ? animationDef.parameters[sampler.output] : sampler.output;\n      pendingNodes.push(this.getDependency('node', name));\n      pendingInputAccessors.push(this.getDependency('accessor', input));\n      pendingOutputAccessors.push(this.getDependency('accessor', output));\n      pendingSamplers.push(sampler);\n      pendingTargets.push(target);\n    }\n\n    return Promise.all([Promise.all(pendingNodes), Promise.all(pendingInputAccessors), Promise.all(pendingOutputAccessors), Promise.all(pendingSamplers), Promise.all(pendingTargets)]).then(function (dependencies) {\n      var nodes = dependencies[0];\n      var inputAccessors = dependencies[1];\n      var outputAccessors = dependencies[2];\n      var samplers = dependencies[3];\n      var targets = dependencies[4];\n      var tracks = [];\n\n      for (var i = 0, il = nodes.length; i < il; i++) {\n        var node = nodes[i];\n        var inputAccessor = inputAccessors[i];\n        var outputAccessor = outputAccessors[i];\n        var sampler = samplers[i];\n        var target = targets[i];\n        if (node === undefined) continue;\n        node.updateMatrix();\n        node.matrixAutoUpdate = true;\n        var TypedKeyframeTrack;\n\n        switch (PATH_PROPERTIES[target.path]) {\n          case PATH_PROPERTIES.weights:\n            TypedKeyframeTrack = THREE.NumberKeyframeTrack;\n            break;\n\n          case PATH_PROPERTIES.rotation:\n            TypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n            break;\n\n          case PATH_PROPERTIES.position:\n          case PATH_PROPERTIES.scale:\n          default:\n            TypedKeyframeTrack = THREE.VectorKeyframeTrack;\n            break;\n        }\n\n        var targetName = node.name ? node.name : node.uuid;\n        var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear;\n        var targetNames = [];\n\n        if (PATH_PROPERTIES[target.path] === PATH_PROPERTIES.weights) {\n          // Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n          node.traverse(function (object) {\n            if (object.isMesh === true && object.morphTargetInfluences) {\n              targetNames.push(object.name ? object.name : object.uuid);\n            }\n          });\n        } else {\n          targetNames.push(targetName);\n        }\n\n        var outputArray = outputAccessor.array;\n\n        if (outputAccessor.normalized) {\n          var scale;\n\n          if (outputArray.constructor === Int8Array) {\n            scale = 1 / 127;\n          } else if (outputArray.constructor === Uint8Array) {\n            scale = 1 / 255;\n          } else if (outputArray.constructor == Int16Array) {\n            scale = 1 / 32767;\n          } else if (outputArray.constructor === Uint16Array) {\n            scale = 1 / 65535;\n          } else {\n            throw new Error('THREE.GLTFLoader: Unsupported output accessor component type.');\n          }\n\n          var scaled = new Float32Array(outputArray.length);\n\n          for (var j = 0, jl = outputArray.length; j < jl; j++) {\n            scaled[j] = outputArray[j] * scale;\n          }\n\n          outputArray = scaled;\n        }\n\n        for (var j = 0, jl = targetNames.length; j < jl; j++) {\n          var track = new TypedKeyframeTrack(targetNames[j] + '.' + PATH_PROPERTIES[target.path], inputAccessor.array, outputArray, interpolation); // Override interpolation with custom factory method.\n\n          if (sampler.interpolation === 'CUBICSPLINE') {\n            track.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline(result) {\n              // A CUBICSPLINE keyframe in glTF has three output values for each input value,\n              // representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n              // must be divided by three to get the interpolant's sampleSize argument.\n              return new GLTFCubicSplineInterpolant(this.times, this.values, this.getValueSize() / 3, result);\n            }; // Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\n\n            track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n          }\n\n          tracks.push(track);\n        }\n      }\n\n      var name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n      return new THREE.AnimationClip(name, undefined, tracks);\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n   * @param {number} nodeIndex\n   * @return {Promise<THREE.Object3D>}\n   */\n\n\n  GLTFParser.prototype.loadNode = function (nodeIndex) {\n    var json = this.json;\n    var extensions = this.extensions;\n    var parser = this;\n    var meshReferences = json.meshReferences;\n    var meshUses = json.meshUses;\n    var nodeDef = json.nodes[nodeIndex];\n    return function () {\n      var pending = [];\n\n      if (nodeDef.mesh !== undefined) {\n        pending.push(parser.getDependency('mesh', nodeDef.mesh).then(function (mesh) {\n          var node;\n\n          if (meshReferences[nodeDef.mesh] > 1) {\n            var instanceNum = meshUses[nodeDef.mesh]++;\n            node = mesh.clone();\n            node.name += '_instance_' + instanceNum; // onBeforeRender copy for Specular-Glossiness\n\n            node.onBeforeRender = mesh.onBeforeRender;\n\n            for (var i = 0, il = node.children.length; i < il; i++) {\n              node.children[i].name += '_instance_' + instanceNum;\n              node.children[i].onBeforeRender = mesh.children[i].onBeforeRender;\n            }\n          } else {\n            node = mesh;\n          } // if weights are provided on the node, override weights on the mesh.\n\n\n          if (nodeDef.weights !== undefined) {\n            node.traverse(function (o) {\n              if (!o.isMesh) return;\n\n              for (var i = 0, il = nodeDef.weights.length; i < il; i++) {\n                o.morphTargetInfluences[i] = nodeDef.weights[i];\n              }\n            });\n          }\n\n          return node;\n        }));\n      }\n\n      if (nodeDef.camera !== undefined) {\n        pending.push(parser.getDependency('camera', nodeDef.camera));\n      }\n\n      if (nodeDef.extensions && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL] && nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light !== undefined) {\n        pending.push(parser.getDependency('light', nodeDef.extensions[EXTENSIONS.KHR_LIGHTS_PUNCTUAL].light));\n      }\n\n      return Promise.all(pending);\n    }().then(function (objects) {\n      var node; // .isBone isn't in glTF spec. See .markDefs\n\n      if (nodeDef.isBone === true) {\n        node = new THREE.Bone();\n      } else if (objects.length > 1) {\n        node = new THREE.Group();\n      } else if (objects.length === 1) {\n        node = objects[0];\n      } else {\n        node = new THREE.Object3D();\n      }\n\n      if (node !== objects[0]) {\n        for (var i = 0, il = objects.length; i < il; i++) {\n          node.add(objects[i]);\n        }\n      }\n\n      if (nodeDef.name !== undefined) {\n        node.userData.name = nodeDef.name;\n        node.name = THREE.PropertyBinding.sanitizeNodeName(nodeDef.name);\n      }\n\n      assignExtrasToUserData(node, nodeDef);\n      if (nodeDef.extensions) addUnknownExtensionsToUserData(extensions, node, nodeDef);\n\n      if (nodeDef.matrix !== undefined) {\n        var matrix = new THREE.Matrix4();\n        matrix.fromArray(nodeDef.matrix);\n        node.applyMatrix(matrix);\n      } else {\n        if (nodeDef.translation !== undefined) {\n          node.position.fromArray(nodeDef.translation);\n        }\n\n        if (nodeDef.rotation !== undefined) {\n          node.quaternion.fromArray(nodeDef.rotation);\n        }\n\n        if (nodeDef.scale !== undefined) {\n          node.scale.fromArray(nodeDef.scale);\n        }\n      }\n\n      return node;\n    });\n  };\n  /**\n   * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n   * @param {number} sceneIndex\n   * @return {Promise<THREE.Scene>}\n   */\n\n\n  GLTFParser.prototype.loadScene = function () {\n    // scene node hierachy builder\n    function buildNodeHierachy(nodeId, parentObject, json, parser) {\n      var nodeDef = json.nodes[nodeId];\n      return parser.getDependency('node', nodeId).then(function (node) {\n        if (nodeDef.skin === undefined) return node; // build skeleton here as well\n\n        var skinEntry;\n        return parser.getDependency('skin', nodeDef.skin).then(function (skin) {\n          skinEntry = skin;\n          var pendingJoints = [];\n\n          for (var i = 0, il = skinEntry.joints.length; i < il; i++) {\n            pendingJoints.push(parser.getDependency('node', skinEntry.joints[i]));\n          }\n\n          return Promise.all(pendingJoints);\n        }).then(function (jointNodes) {\n          node.traverse(function (mesh) {\n            if (!mesh.isMesh) return;\n            var bones = [];\n            var boneInverses = [];\n\n            for (var j = 0, jl = jointNodes.length; j < jl; j++) {\n              var jointNode = jointNodes[j];\n\n              if (jointNode) {\n                bones.push(jointNode);\n                var mat = new THREE.Matrix4();\n\n                if (skinEntry.inverseBindMatrices !== undefined) {\n                  mat.fromArray(skinEntry.inverseBindMatrices.array, j * 16);\n                }\n\n                boneInverses.push(mat);\n              } else {\n                console.warn('THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[j]);\n              }\n            }\n\n            mesh.bind(new THREE.Skeleton(bones, boneInverses), mesh.matrixWorld);\n          });\n          return node;\n        });\n      }).then(function (node) {\n        // build node hierachy\n        parentObject.add(node);\n        var pending = [];\n\n        if (nodeDef.children) {\n          var children = nodeDef.children;\n\n          for (var i = 0, il = children.length; i < il; i++) {\n            var child = children[i];\n            pending.push(buildNodeHierachy(child, node, json, parser));\n          }\n        }\n\n        return Promise.all(pending);\n      });\n    }\n\n    return function loadScene(sceneIndex) {\n      var json = this.json;\n      var extensions = this.extensions;\n      var sceneDef = this.json.scenes[sceneIndex];\n      var parser = this;\n      var scene = new THREE.Scene();\n      if (sceneDef.name !== undefined) scene.name = sceneDef.name;\n      assignExtrasToUserData(scene, sceneDef);\n      if (sceneDef.extensions) addUnknownExtensionsToUserData(extensions, scene, sceneDef);\n      var nodeIds = sceneDef.nodes || [];\n      var pending = [];\n\n      for (var i = 0, il = nodeIds.length; i < il; i++) {\n        pending.push(buildNodeHierachy(nodeIds[i], scene, json, parser));\n      }\n\n      return Promise.all(pending).then(function () {\n        return scene;\n      });\n    };\n  }();\n\n  return GLTFLoader;\n}();\n\nmodule.exports = _GLTFLoader;","map":{"version":3,"sources":["/Users/ikuzmin/Documents/morozov-name/node_modules/three-gltf-loader/index.js"],"names":["THREE","require","_GLTFLoader","GLTFLoader","manager","Loader","call","dracoLoader","ddsLoader","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","resourcePath","path","LoaderUtils","extractUrlBase","itemStart","_onError","e","console","error","itemError","itemEnd","loader","FileLoader","setPath","setResponseType","crossOrigin","setWithCredentials","data","parse","gltf","setDRACOLoader","setDDSLoader","content","extensions","magic","decodeText","Uint8Array","BINARY_EXTENSION_HEADER_MAGIC","EXTENSIONS","KHR_BINARY_GLTF","GLTFBinaryExtension","json","JSON","asset","undefined","version","Error","extensionsUsed","i","length","extensionName","extensionsRequired","KHR_LIGHTS_PUNCTUAL","GLTFLightsExtension","KHR_MATERIALS_UNLIT","GLTFMaterialsUnlitExtension","KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS","GLTFMaterialsPbrSpecularGlossinessExtension","KHR_DRACO_MESH_COMPRESSION","GLTFDracoMeshCompressionExtension","MSFT_TEXTURE_DDS","GLTFTextureDDSExtension","KHR_TEXTURE_TRANSFORM","GLTFTextureTransformExtension","KHR_MESH_QUANTIZATION","GLTFMeshQuantizationExtension","indexOf","warn","parser","GLTFParser","GLTFRegistry","objects","get","key","add","object","remove","removeAll","name","extension","lightDefs","lights","loadLight","lightIndex","lightDef","lightNode","color","Color","fromArray","range","type","DirectionalLight","target","position","set","PointLight","distance","SpotLight","spot","innerConeAngle","outerConeAngle","Math","PI","angle","penumbra","decay","intensity","Promise","resolve","getMaterialType","MeshBasicMaterial","extendParams","materialParams","materialDef","pending","opacity","metallicRoughness","pbrMetallicRoughness","Array","isArray","baseColorFactor","array","baseColorTexture","push","assignTexture","all","BINARY_EXTENSION_HEADER_LENGTH","BINARY_EXTENSION_CHUNK_TYPES","BIN","body","headerView","DataView","header","slice","getUint32","chunkView","chunkIndex","byteLength","chunkLength","chunkType","contentArray","byteOffset","decodePrimitive","primitive","bufferViewIndex","bufferView","gltfAttributeMap","attributes","threeAttributeMap","attributeNormalizedMap","attributeTypeMap","attributeName","threeAttributeName","ATTRIBUTES","toLowerCase","accessorDef","accessors","componentType","WEBGL_COMPONENT_TYPES","normalized","getDependency","then","decodeDracoFile","geometry","attribute","extendTexture","texture","transform","clone","offset","rotation","scale","repeat","texCoord","needsUpdate","specularGlossinessParams","ShaderMaterial","pbrSpecularGlossiness","shader","ShaderLib","uniforms","UniformsUtils","specularMapParsFragmentChunk","join","glossinessMapParsFragmentChunk","specularMapFragmentChunk","glossinessMapFragmentChunk","lightPhysicalFragmentChunk","fragmentShader","replace","roughness","metalness","roughnessMap","metalnessMap","specular","value","setHex","glossiness","specularMap","glossinessMap","vertexShader","defines","diffuseFactor","diffuseTexture","emissive","glossinessFactor","specularFactor","specularGlossinessTexture","specGlossMapDef","createMaterial","params","material","fog","transparent","isGLTFSpecularGlossinessMaterial","map","lightMap","lightMapIntensity","aoMap","aoMapIntensity","emissiveIntensity","emissiveMap","bumpMap","bumpScale","normalMap","normalScale","displacementMap","displacementScale","displacementBias","alphaMap","envMap","envMapIntensity","refractionRatio","derivatives","cloneMaterial","source","il","isColor","refreshUniforms","renderer","scene","camera","diffuse","copy","multiplyScalar","uvScaleMap","isWebGLRenderTarget","matrixAutoUpdate","updateMatrix","uvTransform","matrix","flipEnvMap","isCubeTexture","reflectivity","maxMipLevel","properties","__maxMipLevel","USE_GLOSSINESSMAP","USE_ROUGHNESSMAP","GLTFCubicSplineInterpolant","parameterPositions","sampleValues","sampleSize","resultBuffer","Interpolant","copySampleValue_","index","result","values","valueSize","beforeStart_","afterEnd_","interpolate_","i1","t0","t","t1","stride","stride2","stride3","td","p","pp","ppp","offset1","offset0","s2","s3","s0","s1","p0","m0","p1","m1","WEBGL_CONSTANTS","FLOAT","FLOAT_MAT3","FLOAT_MAT4","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","LINEAR","REPEAT","SAMPLER_2D","POINTS","LINES","LINE_LOOP","LINE_STRIP","TRIANGLES","TRIANGLE_STRIP","TRIANGLE_FAN","UNSIGNED_BYTE","UNSIGNED_SHORT","Int8Array","Int16Array","Uint16Array","Uint32Array","Float32Array","WEBGL_FILTERS","NearestFilter","LinearFilter","NearestMipmapNearestFilter","LinearMipmapNearestFilter","NearestMipmapLinearFilter","LinearMipmapLinearFilter","WEBGL_WRAPPINGS","ClampToEdgeWrapping","MirroredRepeatWrapping","RepeatWrapping","WEBGL_TYPE_SIZES","POSITION","NORMAL","TANGENT","TEXCOORD_0","TEXCOORD_1","COLOR_0","WEIGHTS_0","JOINTS_0","PATH_PROPERTIES","translation","weights","INTERPOLATION","CUBICSPLINE","InterpolateLinear","STEP","InterpolateDiscrete","ALPHA_MODES","OPAQUE","MASK","BLEND","MIME_TYPE_FORMATS","RGBAFormat","RGBFormat","resolveURL","test","defaultMaterial","createDefaultMaterial","MeshStandardMaterial","depthTest","side","FrontSide","addUnknownExtensionsToUserData","knownExtensions","objectDef","userData","gltfExtensions","assignExtrasToUserData","gltfDef","extras","addMorphTargets","targets","hasMorphPosition","hasMorphNormal","pendingPositionAccessors","pendingNormalAccessors","pendingAccessor","normal","morphPositions","morphNormals","morphAttributes","morphTargetsRelative","updateMorphTargets","mesh","meshDef","morphTargetInfluences","targetNames","morphTargetDictionary","createPrimitiveKey","primitiveDef","dracoExtension","geometryKey","indices","createAttributesKey","mode","attributesKey","keys","sort","options","cache","primitiveCache","textureLoader","TextureLoader","setCrossOrigin","fileLoader","markDefs","getDependencies","dependencies","scenes","animations","cameras","nodeDefs","nodes","skinDefs","skins","meshDefs","meshes","meshReferences","meshUses","skinIndex","skinLength","joints","isBone","nodeIndex","nodeLength","nodeDef","skin","isSkinnedMesh","cacheKey","dependency","loadScene","loadNode","loadMesh","loadAccessor","loadBufferView","loadBuffer","loadMaterial","loadTexture","loadSkin","loadAnimation","loadCamera","defs","def","bufferIndex","bufferDef","buffers","uri","reject","bufferViewDef","bufferViews","buffer","accessorIndex","sparse","pendingBufferViews","itemSize","TypedArray","elementBytes","BYTES_PER_ELEMENT","itemBytes","byteStride","bufferAttribute","ibSlice","floor","ibCacheKey","count","ib","InterleavedBuffer","InterleavedBufferAttribute","BufferAttribute","itemSizeIndices","SCALAR","TypedArrayIndices","byteOffsetIndices","byteOffsetValues","sparseIndices","sparseValues","setX","setY","setZ","setW","textureIndex","URL","window","webkitURL","textureDef","textures","textureExtensions","images","sourceURI","isObjectURL","blob","Blob","mimeType","createObjectURL","getHandler","revokeObjectURL","flipY","format","samplers","sampler","magFilter","minFilter","wrapS","wrapT","mapName","mapDef","isCompressedTexture","assignFinalMaterial","useVertexTangents","tangent","useVertexColors","useFlatShading","useSkinning","useMorphTargets","useMorphNormals","isPoints","uuid","pointsMaterial","PointsMaterial","Material","sizeAttenuation","isLine","lineMaterial","LineBasicMaterial","cachedMaterial","skinning","vertexTangents","vertexColors","VertexColors","flatShading","morphTargets","uv2","uv","log","setAttribute","onBeforeRender","materialIndex","materials","materialType","materialExtensions","sgExtension","kmuExtension","metallicFactor","roughnessFactor","metallicRoughnessTexture","doubleSided","DoubleSide","alphaMode","alphaTest","alphaCutoff","normalTexture","Vector2","occlusionTexture","strength","emissiveFactor","emissiveTexture","encoding","sRGBEncoding","computeBounds","box","Box3","accessor","min","max","Vector3","vector","abs","expandByVector","boundingBox","sphere","Sphere","getCenter","center","radius","distanceTo","boundingSphere","addPrimitiveAttributes","assignAttributeAccessor","gltfAttributeName","setIndex","loadGeometries","primitives","createDracoPrimitive","cached","promise","geometryPromise","BufferGeometry","meshIndex","originalMaterials","geometries","SkinnedMesh","Mesh","skinWeight","normalizeSkinWeights","drawMode","TriangleStripDrawMode","TriangleFanDrawMode","LineSegments","Line","LineLoop","Points","group","Group","cameraIndex","cameraDef","PerspectiveCamera","radToDeg","yfov","aspectRatio","znear","zfar","OrthographicCamera","xmag","ymag","skinDef","skinEntry","inverseBindMatrices","animationIndex","animationDef","pendingNodes","pendingInputAccessors","pendingOutputAccessors","pendingSamplers","pendingTargets","channels","channel","node","id","input","parameters","output","inputAccessors","outputAccessors","tracks","inputAccessor","outputAccessor","TypedKeyframeTrack","NumberKeyframeTrack","QuaternionKeyframeTrack","VectorKeyframeTrack","targetName","interpolation","traverse","isMesh","outputArray","scaled","j","jl","track","createInterpolant","InterpolantFactoryMethodGLTFCubicSpline","times","getValueSize","isInterpolantFactoryMethodGLTFCubicSpline","AnimationClip","instanceNum","children","o","light","Bone","Object3D","PropertyBinding","sanitizeNodeName","Matrix4","applyMatrix","quaternion","buildNodeHierachy","nodeId","parentObject","pendingJoints","jointNodes","bones","boneInverses","jointNode","mat","bind","Skeleton","matrixWorld","child","sceneIndex","sceneDef","Scene","nodeIds","module","exports"],"mappings":"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","sourcesContent":["/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\nvar THREE = require( 'three' );\n\n\nvar _GLTFLoader = ( function () {\n\n\tfunction GLTFLoader( manager ) {\n\n\t\tTHREE.Loader.call( this, manager );\n\n\t\tthis.dracoLoader = null;\n\t\tthis.ddsLoader = null;\n\n\t}\n\n\tGLTFLoader.prototype = Object.assign( Object.create( THREE.Loader.prototype ), {\n\n\t\tconstructor: GLTFLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar resourcePath;\n\n\t\t\tif ( this.resourcePath !== '' ) {\n\n\t\t\t\tresourcePath = this.resourcePath;\n\n\t\t\t} else if ( this.path !== '' ) {\n\n\t\t\t\tresourcePath = this.path;\n\n\t\t\t} else {\n\n\t\t\t\tresourcePath = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\t}\n\n\t\t\t// Tells the LoadingManager to track an extra item, which resolves after\n\t\t\t// the model is fully loaded. This means the count of items loaded will\n\t\t\t// be incorrect, but ensures manager.onLoad() does not fire early.\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tvar _onError = function ( e ) {\n\n\t\t\t\tif ( onError ) {\n\n\t\t\t\t\tonError( e );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( e );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t};\n\n\t\t\tvar loader = new THREE.FileLoader( scope.manager );\n\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\t\tif ( scope.crossOrigin === 'use-credentials' ) {\n\n\t\t\t\tloader.setWithCredentials( true );\n\n\t\t\t}\n\n\t\t\tloader.load( url, function ( data ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tscope.parse( data, resourcePath, function ( gltf ) {\n\n\t\t\t\t\t\tonLoad( gltf );\n\n\t\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t\t}, _onError );\n\n\t\t\t\t} catch ( e ) {\n\n\t\t\t\t\t_onError( e );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, _onError );\n\n\t\t},\n\n\t\tsetDRACOLoader: function ( dracoLoader ) {\n\n\t\t\tthis.dracoLoader = dracoLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tsetDDSLoader: function ( ddsLoader ) {\n\n\t\t\tthis.ddsLoader = ddsLoader;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( data, path, onLoad, onError ) {\n\n\t\t\tvar content;\n\t\t\tvar extensions = {};\n\n\t\t\tif ( typeof data === 'string' ) {\n\n\t\t\t\tcontent = data;\n\n\t\t\t} else {\n\n\t\t\t\tvar magic = THREE.LoaderUtils.decodeText( new Uint8Array( data, 0, 4 ) );\n\n\t\t\t\tif ( magic === BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\textensions[ EXTENSIONS.KHR_BINARY_GLTF ] = new GLTFBinaryExtension( data );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcontent = extensions[ EXTENSIONS.KHR_BINARY_GLTF ].content;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tcontent = THREE.LoaderUtils.decodeText( new Uint8Array( data ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar json = JSON.parse( content );\n\n\t\t\tif ( json.asset === undefined || json.asset.version[ 0 ] < 2 ) {\n\n\t\t\t\tif ( onError ) onError( new Error( 'THREE.GLTFLoader: Unsupported asset. glTF versions >=2.0 are supported.' ) );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( json.extensionsUsed ) {\n\n\t\t\t\tfor ( var i = 0; i < json.extensionsUsed.length; ++ i ) {\n\n\t\t\t\t\tvar extensionName = json.extensionsUsed[ i ];\n\t\t\t\t\tvar extensionsRequired = json.extensionsRequired || [];\n\n\t\t\t\t\tswitch ( extensionName ) {\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_LIGHTS_PUNCTUAL:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFLightsExtension( json );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_UNLIT:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsUnlitExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMaterialsPbrSpecularGlossinessExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_DRACO_MESH_COMPRESSION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFDracoMeshCompressionExtension( json, this.dracoLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.MSFT_TEXTURE_DDS:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureDDSExtension( this.ddsLoader );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_TEXTURE_TRANSFORM:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFTextureTransformExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase EXTENSIONS.KHR_MESH_QUANTIZATION:\n\t\t\t\t\t\t\textensions[ extensionName ] = new GLTFMeshQuantizationExtension();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\n\t\t\t\t\t\t\tif ( extensionsRequired.indexOf( extensionName ) >= 0 ) {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Unknown extension \"' + extensionName + '\".' );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar parser = new GLTFParser( json, extensions, {\n\n\t\t\t\tpath: path || this.resourcePath || '',\n\t\t\t\tcrossOrigin: this.crossOrigin,\n\t\t\t\tmanager: this.manager\n\n\t\t\t} );\n\n\t\t\tparser.parse( onLoad, onError );\n\n\t\t}\n\n\t} );\n\n\t/* GLTFREGISTRY */\n\n\tfunction GLTFRegistry() {\n\n\t\tvar objects = {};\n\n\t\treturn\t{\n\n\t\t\tget: function ( key ) {\n\n\t\t\t\treturn objects[ key ];\n\n\t\t\t},\n\n\t\t\tadd: function ( key, object ) {\n\n\t\t\t\tobjects[ key ] = object;\n\n\t\t\t},\n\n\t\t\tremove: function ( key ) {\n\n\t\t\t\tdelete objects[ key ];\n\n\t\t\t},\n\n\t\t\tremoveAll: function () {\n\n\t\t\t\tobjects = {};\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/*********************************/\n\t/********** EXTENSIONS ***********/\n\t/*********************************/\n\n\tvar EXTENSIONS = {\n\t\tKHR_BINARY_GLTF: 'KHR_binary_glTF',\n\t\tKHR_DRACO_MESH_COMPRESSION: 'KHR_draco_mesh_compression',\n\t\tKHR_LIGHTS_PUNCTUAL: 'KHR_lights_punctual',\n\t\tKHR_MATERIALS_PBR_SPECULAR_GLOSSINESS: 'KHR_materials_pbrSpecularGlossiness',\n\t\tKHR_MATERIALS_UNLIT: 'KHR_materials_unlit',\n\t\tKHR_TEXTURE_TRANSFORM: 'KHR_texture_transform',\n\t\tKHR_MESH_QUANTIZATION: 'KHR_mesh_quantization',\n\t\tMSFT_TEXTURE_DDS: 'MSFT_texture_dds'\n\t};\n\n\t/**\n\t * DDS Texture Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Vendor/MSFT_texture_dds\n\t *\n\t */\n\tfunction GLTFTextureDDSExtension( ddsLoader ) {\n\n\t\tif ( ! ddsLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Attempting to load .dds texture without importing THREE.DDSLoader' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.MSFT_TEXTURE_DDS;\n\t\tthis.ddsLoader = ddsLoader;\n\n\t}\n\n\t/**\n\t * Punctual Lights Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_lights_punctual\n\t */\n\tfunction GLTFLightsExtension( json ) {\n\n\t\tthis.name = EXTENSIONS.KHR_LIGHTS_PUNCTUAL;\n\n\t\tvar extension = ( json.extensions && json.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ] ) || {};\n\t\tthis.lightDefs = extension.lights || [];\n\n\t}\n\n\tGLTFLightsExtension.prototype.loadLight = function ( lightIndex ) {\n\n\t\tvar lightDef = this.lightDefs[ lightIndex ];\n\t\tvar lightNode;\n\n\t\tvar color = new THREE.Color( 0xffffff );\n\t\tif ( lightDef.color !== undefined ) color.fromArray( lightDef.color );\n\n\t\tvar range = lightDef.range !== undefined ? lightDef.range : 0;\n\n\t\tswitch ( lightDef.type ) {\n\n\t\t\tcase 'directional':\n\t\t\t\tlightNode = new THREE.DirectionalLight( color );\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tcase 'point':\n\t\t\t\tlightNode = new THREE.PointLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\tbreak;\n\n\t\t\tcase 'spot':\n\t\t\t\tlightNode = new THREE.SpotLight( color );\n\t\t\t\tlightNode.distance = range;\n\t\t\t\t// Handle spotlight properties.\n\t\t\t\tlightDef.spot = lightDef.spot || {};\n\t\t\t\tlightDef.spot.innerConeAngle = lightDef.spot.innerConeAngle !== undefined ? lightDef.spot.innerConeAngle : 0;\n\t\t\t\tlightDef.spot.outerConeAngle = lightDef.spot.outerConeAngle !== undefined ? lightDef.spot.outerConeAngle : Math.PI / 4.0;\n\t\t\t\tlightNode.angle = lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.penumbra = 1.0 - lightDef.spot.innerConeAngle / lightDef.spot.outerConeAngle;\n\t\t\t\tlightNode.target.position.set( 0, 0, - 1 );\n\t\t\t\tlightNode.add( lightNode.target );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unexpected light type, \"' + lightDef.type + '\".' );\n\n\t\t}\n\n\t\t// Some lights (e.g. spot) default to a position other than the origin. Reset the position\n\t\t// here, because node-level parsing will only override position if explicitly specified.\n\t\tlightNode.position.set( 0, 0, 0 );\n\n\t\tlightNode.decay = 2;\n\n\t\tif ( lightDef.intensity !== undefined ) lightNode.intensity = lightDef.intensity;\n\n\t\tlightNode.name = lightDef.name || ( 'light_' + lightIndex );\n\n\t\treturn Promise.resolve( lightNode );\n\n\t};\n\n\t/**\n\t * Unlit Materials Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_unlit\n\t */\n\tfunction GLTFMaterialsUnlitExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MATERIALS_UNLIT;\n\n\t}\n\n\tGLTFMaterialsUnlitExtension.prototype.getMaterialType = function () {\n\n\t\treturn THREE.MeshBasicMaterial;\n\n\t};\n\n\tGLTFMaterialsUnlitExtension.prototype.extendParams = function ( materialParams, materialDef, parser ) {\n\n\t\tvar pending = [];\n\n\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\tmaterialParams.opacity = 1.0;\n\n\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness;\n\n\t\tif ( metallicRoughness ) {\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/* BINARY EXTENSION */\n\tvar BINARY_EXTENSION_HEADER_MAGIC = 'glTF';\n\tvar BINARY_EXTENSION_HEADER_LENGTH = 12;\n\tvar BINARY_EXTENSION_CHUNK_TYPES = { JSON: 0x4E4F534A, BIN: 0x004E4942 };\n\n\tfunction GLTFBinaryExtension( data ) {\n\n\t\tthis.name = EXTENSIONS.KHR_BINARY_GLTF;\n\t\tthis.content = null;\n\t\tthis.body = null;\n\n\t\tvar headerView = new DataView( data, 0, BINARY_EXTENSION_HEADER_LENGTH );\n\n\t\tthis.header = {\n\t\t\tmagic: THREE.LoaderUtils.decodeText( new Uint8Array( data.slice( 0, 4 ) ) ),\n\t\t\tversion: headerView.getUint32( 4, true ),\n\t\t\tlength: headerView.getUint32( 8, true )\n\t\t};\n\n\t\tif ( this.header.magic !== BINARY_EXTENSION_HEADER_MAGIC ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported glTF-Binary header.' );\n\n\t\t} else if ( this.header.version < 2.0 ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: Legacy binary file detected.' );\n\n\t\t}\n\n\t\tvar chunkView = new DataView( data, BINARY_EXTENSION_HEADER_LENGTH );\n\t\tvar chunkIndex = 0;\n\n\t\twhile ( chunkIndex < chunkView.byteLength ) {\n\n\t\t\tvar chunkLength = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tvar chunkType = chunkView.getUint32( chunkIndex, true );\n\t\t\tchunkIndex += 4;\n\n\t\t\tif ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.JSON ) {\n\n\t\t\t\tvar contentArray = new Uint8Array( data, BINARY_EXTENSION_HEADER_LENGTH + chunkIndex, chunkLength );\n\t\t\t\tthis.content = THREE.LoaderUtils.decodeText( contentArray );\n\n\t\t\t} else if ( chunkType === BINARY_EXTENSION_CHUNK_TYPES.BIN ) {\n\n\t\t\t\tvar byteOffset = BINARY_EXTENSION_HEADER_LENGTH + chunkIndex;\n\t\t\t\tthis.body = data.slice( byteOffset, byteOffset + chunkLength );\n\n\t\t\t}\n\n\t\t\t// Clients must ignore chunks with unknown types.\n\n\t\t\tchunkIndex += chunkLength;\n\n\t\t}\n\n\t\tif ( this.content === null ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: JSON content not found.' );\n\n\t\t}\n\n\t}\n\n\t/**\n\t * DRACO Mesh Compression Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_draco_mesh_compression\n\t */\n\tfunction GLTFDracoMeshCompressionExtension( json, dracoLoader ) {\n\n\t\tif ( ! dracoLoader ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: No DRACOLoader instance provided.' );\n\n\t\t}\n\n\t\tthis.name = EXTENSIONS.KHR_DRACO_MESH_COMPRESSION;\n\t\tthis.json = json;\n\t\tthis.dracoLoader = dracoLoader;\n\n\t}\n\n\tGLTFDracoMeshCompressionExtension.prototype.decodePrimitive = function ( primitive, parser ) {\n\n\t\tvar json = this.json;\n\t\tvar dracoLoader = this.dracoLoader;\n\t\tvar bufferViewIndex = primitive.extensions[ this.name ].bufferView;\n\t\tvar gltfAttributeMap = primitive.extensions[ this.name ].attributes;\n\t\tvar threeAttributeMap = {};\n\t\tvar attributeNormalizedMap = {};\n\t\tvar attributeTypeMap = {};\n\n\t\tfor ( var attributeName in gltfAttributeMap ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tthreeAttributeMap[ threeAttributeName ] = gltfAttributeMap[ attributeName ];\n\n\t\t}\n\n\t\tfor ( attributeName in primitive.attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ attributeName ] || attributeName.toLowerCase();\n\n\t\t\tif ( gltfAttributeMap[ attributeName ] !== undefined ) {\n\n\t\t\t\tvar accessorDef = json.accessors[ primitive.attributes[ attributeName ] ];\n\t\t\t\tvar componentType = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t\tattributeTypeMap[ threeAttributeName ] = componentType;\n\t\t\t\tattributeNormalizedMap[ threeAttributeName ] = accessorDef.normalized === true;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn parser.getDependency( 'bufferView', bufferViewIndex ).then( function ( bufferView ) {\n\n\t\t\treturn new Promise( function ( resolve ) {\n\n\t\t\t\tdracoLoader.decodeDracoFile( bufferView, function ( geometry ) {\n\n\t\t\t\t\tfor ( var attributeName in geometry.attributes ) {\n\n\t\t\t\t\t\tvar attribute = geometry.attributes[ attributeName ];\n\t\t\t\t\t\tvar normalized = attributeNormalizedMap[ attributeName ];\n\n\t\t\t\t\t\tif ( normalized !== undefined ) attribute.normalized = normalized;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve( geometry );\n\n\t\t\t\t}, threeAttributeMap, attributeTypeMap );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Texture Transform Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_texture_transform\n\t */\n\tfunction GLTFTextureTransformExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_TEXTURE_TRANSFORM;\n\n\t}\n\n\tGLTFTextureTransformExtension.prototype.extendTexture = function ( texture, transform ) {\n\n\t\ttexture = texture.clone();\n\n\t\tif ( transform.offset !== undefined ) {\n\n\t\t\ttexture.offset.fromArray( transform.offset );\n\n\t\t}\n\n\t\tif ( transform.rotation !== undefined ) {\n\n\t\t\ttexture.rotation = transform.rotation;\n\n\t\t}\n\n\t\tif ( transform.scale !== undefined ) {\n\n\t\t\ttexture.repeat.fromArray( transform.scale );\n\n\t\t}\n\n\t\tif ( transform.texCoord !== undefined ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Custom UV sets in \"' + this.name + '\" extension not yet supported.' );\n\n\t\t}\n\n\t\ttexture.needsUpdate = true;\n\n\t\treturn texture;\n\n\t};\n\n\t/**\n\t * Specular-Glossiness Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_materials_pbrSpecularGlossiness\n\t */\n\tfunction GLTFMaterialsPbrSpecularGlossinessExtension() {\n\n\t\treturn {\n\n\t\t\tname: EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS,\n\n\t\t\tspecularGlossinessParams: [\n\t\t\t\t'color',\n\t\t\t\t'map',\n\t\t\t\t'lightMap',\n\t\t\t\t'lightMapIntensity',\n\t\t\t\t'aoMap',\n\t\t\t\t'aoMapIntensity',\n\t\t\t\t'emissive',\n\t\t\t\t'emissiveIntensity',\n\t\t\t\t'emissiveMap',\n\t\t\t\t'bumpMap',\n\t\t\t\t'bumpScale',\n\t\t\t\t'normalMap',\n\t\t\t\t'displacementMap',\n\t\t\t\t'displacementScale',\n\t\t\t\t'displacementBias',\n\t\t\t\t'specularMap',\n\t\t\t\t'specular',\n\t\t\t\t'glossinessMap',\n\t\t\t\t'glossiness',\n\t\t\t\t'alphaMap',\n\t\t\t\t'envMap',\n\t\t\t\t'envMapIntensity',\n\t\t\t\t'refractionRatio',\n\t\t\t],\n\n\t\t\tgetMaterialType: function () {\n\n\t\t\t\treturn THREE.ShaderMaterial;\n\n\t\t\t},\n\n\t\t\textendParams: function ( materialParams, materialDef, parser ) {\n\n\t\t\t\tvar pbrSpecularGlossiness = materialDef.extensions[ this.name ];\n\n\t\t\t\tvar shader = THREE.ShaderLib[ 'standard' ];\n\n\t\t\t\tvar uniforms = THREE.UniformsUtils.clone( shader.uniforms );\n\n\t\t\t\tvar specularMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tuniform sampler2D specularMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapParsFragmentChunk = [\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tuniform sampler2D glossinessMap;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar specularMapFragmentChunk = [\n\t\t\t\t\t'vec3 specularFactor = specular;',\n\t\t\t\t\t'#ifdef USE_SPECULARMAP',\n\t\t\t\t\t'\tvec4 texelSpecular = texture2D( specularMap, vUv );',\n\t\t\t\t\t'\ttexelSpecular = sRGBToLinear( texelSpecular );',\n\t\t\t\t\t'\t// reads channel RGB, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tspecularFactor *= texelSpecular.rgb;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar glossinessMapFragmentChunk = [\n\t\t\t\t\t'float glossinessFactor = glossiness;',\n\t\t\t\t\t'#ifdef USE_GLOSSINESSMAP',\n\t\t\t\t\t'\tvec4 texelGlossiness = texture2D( glossinessMap, vUv );',\n\t\t\t\t\t'\t// reads channel A, compatible with a glTF Specular-Glossiness (RGBA) texture',\n\t\t\t\t\t'\tglossinessFactor *= texelGlossiness.a;',\n\t\t\t\t\t'#endif'\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar lightPhysicalFragmentChunk = [\n\t\t\t\t\t'PhysicalMaterial material;',\n\t\t\t\t\t'material.diffuseColor = diffuseColor.rgb;',\n\t\t\t\t\t'material.specularRoughness = clamp( 1.0 - glossinessFactor, 0.04, 1.0 );',\n\t\t\t\t\t'material.specularColor = specularFactor.rgb;',\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tvar fragmentShader = shader.fragmentShader\n\t\t\t\t\t.replace( 'uniform float roughness;', 'uniform vec3 specular;' )\n\t\t\t\t\t.replace( 'uniform float metalness;', 'uniform float glossiness;' )\n\t\t\t\t\t.replace( '#include <roughnessmap_pars_fragment>', specularMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_pars_fragment>', glossinessMapParsFragmentChunk )\n\t\t\t\t\t.replace( '#include <roughnessmap_fragment>', specularMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <metalnessmap_fragment>', glossinessMapFragmentChunk )\n\t\t\t\t\t.replace( '#include <lights_physical_fragment>', lightPhysicalFragmentChunk );\n\n\t\t\t\tdelete uniforms.roughness;\n\t\t\t\tdelete uniforms.metalness;\n\t\t\t\tdelete uniforms.roughnessMap;\n\t\t\t\tdelete uniforms.metalnessMap;\n\n\t\t\t\tuniforms.specular = { value: new THREE.Color().setHex( 0x111111 ) };\n\t\t\t\tuniforms.glossiness = { value: 0.5 };\n\t\t\t\tuniforms.specularMap = { value: null };\n\t\t\t\tuniforms.glossinessMap = { value: null };\n\n\t\t\t\tmaterialParams.vertexShader = shader.vertexShader;\n\t\t\t\tmaterialParams.fragmentShader = fragmentShader;\n\t\t\t\tmaterialParams.uniforms = uniforms;\n\t\t\t\tmaterialParams.defines = { 'STANDARD': '' };\n\n\t\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.diffuseFactor ) ) {\n\n\t\t\t\t\tvar array = pbrSpecularGlossiness.diffuseFactor;\n\n\t\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.diffuseTexture !== undefined ) {\n\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', pbrSpecularGlossiness.diffuseTexture ) );\n\n\t\t\t\t}\n\n\t\t\t\tmaterialParams.emissive = new THREE.Color( 0.0, 0.0, 0.0 );\n\t\t\t\tmaterialParams.glossiness = pbrSpecularGlossiness.glossinessFactor !== undefined ? pbrSpecularGlossiness.glossinessFactor : 1.0;\n\t\t\t\tmaterialParams.specular = new THREE.Color( 1.0, 1.0, 1.0 );\n\n\t\t\t\tif ( Array.isArray( pbrSpecularGlossiness.specularFactor ) ) {\n\n\t\t\t\t\tmaterialParams.specular.fromArray( pbrSpecularGlossiness.specularFactor );\n\n\t\t\t\t}\n\n\t\t\t\tif ( pbrSpecularGlossiness.specularGlossinessTexture !== undefined ) {\n\n\t\t\t\t\tvar specGlossMapDef = pbrSpecularGlossiness.specularGlossinessTexture;\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'glossinessMap', specGlossMapDef ) );\n\t\t\t\t\tpending.push( parser.assignTexture( materialParams, 'specularMap', specGlossMapDef ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t},\n\n\t\t\tcreateMaterial: function ( params ) {\n\n\t\t\t\t// setup material properties based on MeshStandardMaterial for Specular-Glossiness\n\n\t\t\t\tvar material = new THREE.ShaderMaterial( {\n\t\t\t\t\tdefines: params.defines,\n\t\t\t\t\tvertexShader: params.vertexShader,\n\t\t\t\t\tfragmentShader: params.fragmentShader,\n\t\t\t\t\tuniforms: params.uniforms,\n\t\t\t\t\tfog: true,\n\t\t\t\t\tlights: true,\n\t\t\t\t\topacity: params.opacity,\n\t\t\t\t\ttransparent: params.transparent\n\t\t\t\t} );\n\n\t\t\t\tmaterial.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tmaterial.color = params.color;\n\n\t\t\t\tmaterial.map = params.map === undefined ? null : params.map;\n\n\t\t\t\tmaterial.lightMap = null;\n\t\t\t\tmaterial.lightMapIntensity = 1.0;\n\n\t\t\t\tmaterial.aoMap = params.aoMap === undefined ? null : params.aoMap;\n\t\t\t\tmaterial.aoMapIntensity = 1.0;\n\n\t\t\t\tmaterial.emissive = params.emissive;\n\t\t\t\tmaterial.emissiveIntensity = 1.0;\n\t\t\t\tmaterial.emissiveMap = params.emissiveMap === undefined ? null : params.emissiveMap;\n\n\t\t\t\tmaterial.bumpMap = params.bumpMap === undefined ? null : params.bumpMap;\n\t\t\t\tmaterial.bumpScale = 1;\n\n\t\t\t\tmaterial.normalMap = params.normalMap === undefined ? null : params.normalMap;\n\n\t\t\t\tif ( params.normalScale ) material.normalScale = params.normalScale;\n\n\t\t\t\tmaterial.displacementMap = null;\n\t\t\t\tmaterial.displacementScale = 1;\n\t\t\t\tmaterial.displacementBias = 0;\n\n\t\t\t\tmaterial.specularMap = params.specularMap === undefined ? null : params.specularMap;\n\t\t\t\tmaterial.specular = params.specular;\n\n\t\t\t\tmaterial.glossinessMap = params.glossinessMap === undefined ? null : params.glossinessMap;\n\t\t\t\tmaterial.glossiness = params.glossiness;\n\n\t\t\t\tmaterial.alphaMap = null;\n\n\t\t\t\tmaterial.envMap = params.envMap === undefined ? null : params.envMap;\n\t\t\t\tmaterial.envMapIntensity = 1.0;\n\n\t\t\t\tmaterial.refractionRatio = 0.98;\n\n\t\t\t\tmaterial.extensions.derivatives = true;\n\n\t\t\t\treturn material;\n\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Clones a GLTFSpecularGlossinessMaterial instance. The ShaderMaterial.copy() method can\n\t\t\t * copy only properties it knows about or inherits, and misses many properties that would\n\t\t\t * normally be defined by MeshStandardMaterial.\n\t\t\t *\n\t\t\t * This method allows GLTFSpecularGlossinessMaterials to be cloned in the process of\n\t\t\t * loading a glTF model, but cloning later (e.g. by the user) would require these changes\n\t\t\t * AND also updating `.onBeforeRender` on the parent mesh.\n\t\t\t *\n\t\t\t * @param  {THREE.ShaderMaterial} source\n\t\t\t * @return {THREE.ShaderMaterial}\n\t\t\t */\n\t\t\tcloneMaterial: function ( source ) {\n\n\t\t\t\tvar target = source.clone();\n\n\t\t\t\ttarget.isGLTFSpecularGlossinessMaterial = true;\n\n\t\t\t\tvar params = this.specularGlossinessParams;\n\n\t\t\t\tfor ( var i = 0, il = params.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar value = source[ params[ i ] ];\n\t\t\t\t\ttarget[ params[ i ] ] = ( value && value.isColor ) ? value.clone() : value;\n\n\t\t\t\t}\n\n\t\t\t\treturn target;\n\n\t\t\t},\n\n\t\t\t// Here's based on refreshUniformsCommon() and refreshUniformsStandard() in WebGLRenderer.\n\t\t\trefreshUniforms: function ( renderer, scene, camera, geometry, material ) {\n\n\t\t\t\tif ( material.isGLTFSpecularGlossinessMaterial !== true ) {\n\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar uniforms = material.uniforms;\n\t\t\t\tvar defines = material.defines;\n\n\t\t\t\tuniforms.opacity.value = material.opacity;\n\n\t\t\t\tuniforms.diffuse.value.copy( material.color );\n\t\t\t\tuniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );\n\n\t\t\t\tuniforms.map.value = material.map;\n\t\t\t\tuniforms.specularMap.value = material.specularMap;\n\t\t\t\tuniforms.alphaMap.value = material.alphaMap;\n\n\t\t\t\tuniforms.lightMap.value = material.lightMap;\n\t\t\t\tuniforms.lightMapIntensity.value = material.lightMapIntensity;\n\n\t\t\t\tuniforms.aoMap.value = material.aoMap;\n\t\t\t\tuniforms.aoMapIntensity.value = material.aoMapIntensity;\n\n\t\t\t\t// uv repeat and offset setting priorities\n\t\t\t\t// 1. color map\n\t\t\t\t// 2. specular map\n\t\t\t\t// 3. normal map\n\t\t\t\t// 4. bump map\n\t\t\t\t// 5. alpha map\n\t\t\t\t// 6. emissive map\n\n\t\t\t\tvar uvScaleMap;\n\n\t\t\t\tif ( material.map ) {\n\n\t\t\t\t\tuvScaleMap = material.map;\n\n\t\t\t\t} else if ( material.specularMap ) {\n\n\t\t\t\t\tuvScaleMap = material.specularMap;\n\n\t\t\t\t} else if ( material.displacementMap ) {\n\n\t\t\t\t\tuvScaleMap = material.displacementMap;\n\n\t\t\t\t} else if ( material.normalMap ) {\n\n\t\t\t\t\tuvScaleMap = material.normalMap;\n\n\t\t\t\t} else if ( material.bumpMap ) {\n\n\t\t\t\t\tuvScaleMap = material.bumpMap;\n\n\t\t\t\t} else if ( material.glossinessMap ) {\n\n\t\t\t\t\tuvScaleMap = material.glossinessMap;\n\n\t\t\t\t} else if ( material.alphaMap ) {\n\n\t\t\t\t\tuvScaleMap = material.alphaMap;\n\n\t\t\t\t} else if ( material.emissiveMap ) {\n\n\t\t\t\t\tuvScaleMap = material.emissiveMap;\n\n\t\t\t\t}\n\n\t\t\t\tif ( uvScaleMap !== undefined ) {\n\n\t\t\t\t\t// backwards compatibility\n\t\t\t\t\tif ( uvScaleMap.isWebGLRenderTarget ) {\n\n\t\t\t\t\t\tuvScaleMap = uvScaleMap.texture;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( uvScaleMap.matrixAutoUpdate === true ) {\n\n\t\t\t\t\t\tuvScaleMap.updateMatrix();\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms.uvTransform.value.copy( uvScaleMap.matrix );\n\n\t\t\t\t}\n\n\t\t\t\tif ( material.envMap ) {\n\n\t\t\t\t\tuniforms.envMap.value = material.envMap;\n\t\t\t\t\tuniforms.envMapIntensity.value = material.envMapIntensity;\n\n\t\t\t\t\t// don't flip CubeTexture envMaps, flip everything else:\n\t\t\t\t\t//  WebGLRenderTargetCube will be flipped for backwards compatibility\n\t\t\t\t\t//  WebGLRenderTargetCube.texture will be flipped because it's a Texture and NOT a CubeTexture\n\t\t\t\t\t// this check must be handled differently, or removed entirely, if WebGLRenderTargetCube uses a CubeTexture in the future\n\t\t\t\t\tuniforms.flipEnvMap.value = material.envMap.isCubeTexture ? - 1 : 1;\n\n\t\t\t\t\tuniforms.reflectivity.value = material.reflectivity;\n\t\t\t\t\tuniforms.refractionRatio.value = material.refractionRatio;\n\n\t\t\t\t\tuniforms.maxMipLevel.value = renderer.properties.get( material.envMap ).__maxMipLevel;\n\n\t\t\t\t}\n\n\t\t\t\tuniforms.specular.value.copy( material.specular );\n\t\t\t\tuniforms.glossiness.value = material.glossiness;\n\n\t\t\t\tuniforms.glossinessMap.value = material.glossinessMap;\n\n\t\t\t\tuniforms.emissiveMap.value = material.emissiveMap;\n\t\t\t\tuniforms.bumpMap.value = material.bumpMap;\n\t\t\t\tuniforms.normalMap.value = material.normalMap;\n\n\t\t\t\tuniforms.displacementMap.value = material.displacementMap;\n\t\t\t\tuniforms.displacementScale.value = material.displacementScale;\n\t\t\t\tuniforms.displacementBias.value = material.displacementBias;\n\n\t\t\t\tif ( uniforms.glossinessMap.value !== null && defines.USE_GLOSSINESSMAP === undefined ) {\n\n\t\t\t\t\tdefines.USE_GLOSSINESSMAP = '';\n\t\t\t\t\t// set USE_ROUGHNESSMAP to enable vUv\n\t\t\t\t\tdefines.USE_ROUGHNESSMAP = '';\n\n\t\t\t\t}\n\n\t\t\t\tif ( uniforms.glossinessMap.value === null && defines.USE_GLOSSINESSMAP !== undefined ) {\n\n\t\t\t\t\tdelete defines.USE_GLOSSINESSMAP;\n\t\t\t\t\tdelete defines.USE_ROUGHNESSMAP;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t}\n\n\t/**\n\t * Mesh Quantization Extension\n\t *\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/extensions/2.0/Khronos/KHR_mesh_quantization\n\t */\n\tfunction GLTFMeshQuantizationExtension() {\n\n\t\tthis.name = EXTENSIONS.KHR_MESH_QUANTIZATION;\n\n\t}\n\n\t/*********************************/\n\t/********** INTERPOLATION ********/\n\t/*********************************/\n\n\t// Spline Interpolation\n\t// Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#appendix-c-spline-interpolation\n\tfunction GLTFCubicSplineInterpolant( parameterPositions, sampleValues, sampleSize, resultBuffer ) {\n\n\t\tTHREE.Interpolant.call( this, parameterPositions, sampleValues, sampleSize, resultBuffer );\n\n\t}\n\n\tGLTFCubicSplineInterpolant.prototype = Object.create( THREE.Interpolant.prototype );\n\tGLTFCubicSplineInterpolant.prototype.constructor = GLTFCubicSplineInterpolant;\n\n\tGLTFCubicSplineInterpolant.prototype.copySampleValue_ = function ( index ) {\n\n\t\t// Copies a sample value to the result buffer. See description of glTF\n\t\t// CUBICSPLINE values layout in interpolate_() function below.\n\n\t\tvar result = this.resultBuffer,\n\t\t\tvalues = this.sampleValues,\n\t\t\tvalueSize = this.valueSize,\n\t\t\toffset = index * valueSize * 3 + valueSize;\n\n\t\tfor ( var i = 0; i !== valueSize; i ++ ) {\n\n\t\t\tresult[ i ] = values[ offset + i ];\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\tGLTFCubicSplineInterpolant.prototype.beforeStart_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.afterEnd_ = GLTFCubicSplineInterpolant.prototype.copySampleValue_;\n\n\tGLTFCubicSplineInterpolant.prototype.interpolate_ = function ( i1, t0, t, t1 ) {\n\n\t\tvar result = this.resultBuffer;\n\t\tvar values = this.sampleValues;\n\t\tvar stride = this.valueSize;\n\n\t\tvar stride2 = stride * 2;\n\t\tvar stride3 = stride * 3;\n\n\t\tvar td = t1 - t0;\n\n\t\tvar p = ( t - t0 ) / td;\n\t\tvar pp = p * p;\n\t\tvar ppp = pp * p;\n\n\t\tvar offset1 = i1 * stride3;\n\t\tvar offset0 = offset1 - stride3;\n\n\t\tvar s2 = - 2 * ppp + 3 * pp;\n\t\tvar s3 = ppp - pp;\n\t\tvar s0 = 1 - s2;\n\t\tvar s1 = s3 - pp + p;\n\n\t\t// Layout of keyframe output values for CUBICSPLINE animations:\n\t\t//   [ inTangent_1, splineVertex_1, outTangent_1, inTangent_2, splineVertex_2, ... ]\n\t\tfor ( var i = 0; i !== stride; i ++ ) {\n\n\t\t\tvar p0 = values[ offset0 + i + stride ]; // splineVertex_k\n\t\t\tvar m0 = values[ offset0 + i + stride2 ] * td; // outTangent_k * (t_k+1 - t_k)\n\t\t\tvar p1 = values[ offset1 + i + stride ]; // splineVertex_k+1\n\t\t\tvar m1 = values[ offset1 + i ] * td; // inTangent_k+1 * (t_k+1 - t_k)\n\n\t\t\tresult[ i ] = s0 * p0 + s1 * m0 + s2 * p1 + s3 * m1;\n\n\t\t}\n\n\t\treturn result;\n\n\t};\n\n\t/*********************************/\n\t/********** INTERNALS ************/\n\t/*********************************/\n\n\t/* CONSTANTS */\n\n\tvar WEBGL_CONSTANTS = {\n\t\tFLOAT: 5126,\n\t\t//FLOAT_MAT2: 35674,\n\t\tFLOAT_MAT3: 35675,\n\t\tFLOAT_MAT4: 35676,\n\t\tFLOAT_VEC2: 35664,\n\t\tFLOAT_VEC3: 35665,\n\t\tFLOAT_VEC4: 35666,\n\t\tLINEAR: 9729,\n\t\tREPEAT: 10497,\n\t\tSAMPLER_2D: 35678,\n\t\tPOINTS: 0,\n\t\tLINES: 1,\n\t\tLINE_LOOP: 2,\n\t\tLINE_STRIP: 3,\n\t\tTRIANGLES: 4,\n\t\tTRIANGLE_STRIP: 5,\n\t\tTRIANGLE_FAN: 6,\n\t\tUNSIGNED_BYTE: 5121,\n\t\tUNSIGNED_SHORT: 5123\n\t};\n\n\tvar WEBGL_COMPONENT_TYPES = {\n\t\t5120: Int8Array,\n\t\t5121: Uint8Array,\n\t\t5122: Int16Array,\n\t\t5123: Uint16Array,\n\t\t5125: Uint32Array,\n\t\t5126: Float32Array\n\t};\n\n\tvar WEBGL_FILTERS = {\n\t\t9728: THREE.NearestFilter,\n\t\t9729: THREE.LinearFilter,\n\t\t9984: THREE.NearestMipmapNearestFilter,\n\t\t9985: THREE.LinearMipmapNearestFilter,\n\t\t9986: THREE.NearestMipmapLinearFilter,\n\t\t9987: THREE.LinearMipmapLinearFilter\n\t};\n\n\tvar WEBGL_WRAPPINGS = {\n\t\t33071: THREE.ClampToEdgeWrapping,\n\t\t33648: THREE.MirroredRepeatWrapping,\n\t\t10497: THREE.RepeatWrapping\n\t};\n\n\tvar WEBGL_TYPE_SIZES = {\n\t\t'SCALAR': 1,\n\t\t'VEC2': 2,\n\t\t'VEC3': 3,\n\t\t'VEC4': 4,\n\t\t'MAT2': 4,\n\t\t'MAT3': 9,\n\t\t'MAT4': 16\n\t};\n\n\tvar ATTRIBUTES = {\n\t\tPOSITION: 'position',\n\t\tNORMAL: 'normal',\n\t\tTANGENT: 'tangent',\n\t\tTEXCOORD_0: 'uv',\n\t\tTEXCOORD_1: 'uv2',\n\t\tCOLOR_0: 'color',\n\t\tWEIGHTS_0: 'skinWeight',\n\t\tJOINTS_0: 'skinIndex',\n\t};\n\n\tvar PATH_PROPERTIES = {\n\t\tscale: 'scale',\n\t\ttranslation: 'position',\n\t\trotation: 'quaternion',\n\t\tweights: 'morphTargetInfluences'\n\t};\n\n\tvar INTERPOLATION = {\n\t\tCUBICSPLINE: undefined, // We use a custom interpolant (GLTFCubicSplineInterpolation) for CUBICSPLINE tracks. Each\n\t\t                        // keyframe track will be initialized with a default interpolation type, then modified.\n\t\tLINEAR: THREE.InterpolateLinear,\n\t\tSTEP: THREE.InterpolateDiscrete\n\t};\n\n\tvar ALPHA_MODES = {\n\t\tOPAQUE: 'OPAQUE',\n\t\tMASK: 'MASK',\n\t\tBLEND: 'BLEND'\n\t};\n\n\tvar MIME_TYPE_FORMATS = {\n\t\t'image/png': THREE.RGBAFormat,\n\t\t'image/jpeg': THREE.RGBFormat\n\t};\n\n\t/* UTILITY FUNCTIONS */\n\n\tfunction resolveURL( url, path ) {\n\n\t\t// Invalid URL\n\t\tif ( typeof url !== 'string' || url === '' ) return '';\n\n\t\t// Host Relative URL\n\t\tif ( /^https?:\\/\\//i.test( path ) && /^\\//.test( url ) ) {\n\n\t\t\tpath = path.replace( /(^https?:\\/\\/[^\\/]+).*/i, '$1' );\n\n\t\t}\n\n\t\t// Absolute URL http://,https://,//\n\t\tif ( /^(https?:)?\\/\\//i.test( url ) ) return url;\n\n\t\t// Data URI\n\t\tif ( /^data:.*,.*$/i.test( url ) ) return url;\n\n\t\t// Blob URL\n\t\tif ( /^blob:.*$/i.test( url ) ) return url;\n\n\t\t// Relative URL\n\t\treturn path + url;\n\n\t}\n\n\tvar defaultMaterial;\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#default-material\n\t */\n\tfunction createDefaultMaterial() {\n\n\t\tdefaultMaterial = defaultMaterial || new THREE.MeshStandardMaterial( {\n\t\t\tcolor: 0xFFFFFF,\n\t\t\temissive: 0x000000,\n\t\t\tmetalness: 1,\n\t\t\troughness: 1,\n\t\t\ttransparent: false,\n\t\t\tdepthTest: true,\n\t\t\tside: THREE.FrontSide\n\t\t} );\n\n\t\treturn defaultMaterial;\n\n\t}\n\n\tfunction addUnknownExtensionsToUserData( knownExtensions, object, objectDef ) {\n\n\t\t// Add unknown glTF extensions to an object's userData.\n\n\t\tfor ( var name in objectDef.extensions ) {\n\n\t\t\tif ( knownExtensions[ name ] === undefined ) {\n\n\t\t\t\tobject.userData.gltfExtensions = object.userData.gltfExtensions || {};\n\t\t\t\tobject.userData.gltfExtensions[ name ] = objectDef.extensions[ name ];\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * @param {THREE.Object3D|THREE.Material|THREE.BufferGeometry} object\n\t * @param {GLTF.definition} gltfDef\n\t */\n\tfunction assignExtrasToUserData( object, gltfDef ) {\n\n\t\tif ( gltfDef.extras !== undefined ) {\n\n\t\t\tif ( typeof gltfDef.extras === 'object' ) {\n\n\t\t\t\tObject.assign( object.userData, gltfDef.extras );\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Ignoring primitive type .extras, ' + gltfDef.extras );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#morph-targets\n\t *\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {Array<GLTF.Target>} targets\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addMorphTargets( geometry, targets, parser ) {\n\n\t\tvar hasMorphPosition = false;\n\t\tvar hasMorphNormal = false;\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( target.POSITION !== undefined ) hasMorphPosition = true;\n\t\t\tif ( target.NORMAL !== undefined ) hasMorphNormal = true;\n\n\t\t\tif ( hasMorphPosition && hasMorphNormal ) break;\n\n\t\t}\n\n\t\tif ( ! hasMorphPosition && ! hasMorphNormal ) return Promise.resolve( geometry );\n\n\t\tvar pendingPositionAccessors = [];\n\t\tvar pendingNormalAccessors = [];\n\n\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\tvar target = targets[ i ];\n\n\t\t\tif ( hasMorphPosition ) {\n\n\t\t\t\tvar pendingAccessor = target.POSITION !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.POSITION )\n\t\t\t\t\t: geometry.attributes.position;\n\n\t\t\t\tpendingPositionAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t\tif ( hasMorphNormal ) {\n\n\t\t\t\tvar pendingAccessor = target.NORMAL !== undefined\n\t\t\t\t\t? parser.getDependency( 'accessor', target.NORMAL )\n\t\t\t\t\t: geometry.attributes.normal;\n\n\t\t\t\tpendingNormalAccessors.push( pendingAccessor );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( [\n\t\t\tPromise.all( pendingPositionAccessors ),\n\t\t\tPromise.all( pendingNormalAccessors )\n\t\t] ).then( function ( accessors ) {\n\n\t\t\tvar morphPositions = accessors[ 0 ];\n\t\t\tvar morphNormals = accessors[ 1 ];\n\n\t\t\tif ( hasMorphPosition ) geometry.morphAttributes.position = morphPositions;\n\t\t\tif ( hasMorphNormal ) geometry.morphAttributes.normal = morphNormals;\n\t\t\tgeometry.morphTargetsRelative = true;\n\n\t\t\treturn geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * @param {THREE.Mesh} mesh\n\t * @param {GLTF.Mesh} meshDef\n\t */\n\tfunction updateMorphTargets( mesh, meshDef ) {\n\n\t\tmesh.updateMorphTargets();\n\n\t\tif ( meshDef.weights !== undefined ) {\n\n\t\t\tfor ( var i = 0, il = meshDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\tmesh.morphTargetInfluences[ i ] = meshDef.weights[ i ];\n\n\t\t\t}\n\n\t\t}\n\n\t\t// .extras has user-defined data, so check that .extras.targetNames is an array.\n\t\tif ( meshDef.extras && Array.isArray( meshDef.extras.targetNames ) ) {\n\n\t\t\tvar targetNames = meshDef.extras.targetNames;\n\n\t\t\tif ( mesh.morphTargetInfluences.length === targetNames.length ) {\n\n\t\t\t\tmesh.morphTargetDictionary = {};\n\n\t\t\t\tfor ( var i = 0, il = targetNames.length; i < il; i ++ ) {\n\n\t\t\t\t\tmesh.morphTargetDictionary[ targetNames[ i ] ] = i;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Invalid extras.targetNames length. Ignoring names.' );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tfunction createPrimitiveKey( primitiveDef ) {\n\n\t\tvar dracoExtension = primitiveDef.extensions && primitiveDef.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ];\n\t\tvar geometryKey;\n\n\t\tif ( dracoExtension ) {\n\n\t\t\tgeometryKey = 'draco:' + dracoExtension.bufferView\n\t\t\t\t+ ':' + dracoExtension.indices\n\t\t\t\t+ ':' + createAttributesKey( dracoExtension.attributes );\n\n\t\t} else {\n\n\t\t\tgeometryKey = primitiveDef.indices + ':' + createAttributesKey( primitiveDef.attributes ) + ':' + primitiveDef.mode;\n\n\t\t}\n\n\t\treturn geometryKey;\n\n\t}\n\n\tfunction createAttributesKey( attributes ) {\n\n\t\tvar attributesKey = '';\n\n\t\tvar keys = Object.keys( attributes ).sort();\n\n\t\tfor ( var i = 0, il = keys.length; i < il; i ++ ) {\n\n\t\t\tattributesKey += keys[ i ] + ':' + attributes[ keys[ i ] ] + ';';\n\n\t\t}\n\n\t\treturn attributesKey;\n\n\t}\n\n\t/* GLTF PARSER */\n\n\tfunction GLTFParser( json, extensions, options ) {\n\n\t\tthis.json = json || {};\n\t\tthis.extensions = extensions || {};\n\t\tthis.options = options || {};\n\n\t\t// loader object cache\n\t\tthis.cache = new GLTFRegistry();\n\n\t\t// BufferGeometry caching\n\t\tthis.primitiveCache = {};\n\n\t\tthis.textureLoader = new THREE.TextureLoader( this.options.manager );\n\t\tthis.textureLoader.setCrossOrigin( this.options.crossOrigin );\n\n\t\tthis.fileLoader = new THREE.FileLoader( this.options.manager );\n\t\tthis.fileLoader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.options.crossOrigin === 'use-credentials' ) {\n\n\t\t\tthis.fileLoader.setWithCredentials( true );\n\n\t\t}\n\n\t}\n\n\tGLTFParser.prototype.parse = function ( onLoad, onError ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\n\t\t// Clear the loader cache\n\t\tthis.cache.removeAll();\n\n\t\t// Mark the special nodes/meshes in json for efficient parse\n\t\tthis.markDefs();\n\n\t\tPromise.all( [\n\n\t\t\tthis.getDependencies( 'scene' ),\n\t\t\tthis.getDependencies( 'animation' ),\n\t\t\tthis.getDependencies( 'camera' ),\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar result = {\n\t\t\t\tscene: dependencies[ 0 ][ json.scene || 0 ],\n\t\t\t\tscenes: dependencies[ 0 ],\n\t\t\t\tanimations: dependencies[ 1 ],\n\t\t\t\tcameras: dependencies[ 2 ],\n\t\t\t\tasset: json.asset,\n\t\t\t\tparser: parser,\n\t\t\t\tuserData: {}\n\t\t\t};\n\n\t\t\taddUnknownExtensionsToUserData( extensions, result, json );\n\n\t\t\tassignExtrasToUserData( result, json );\n\n\t\t\tonLoad( result );\n\n\t\t} ).catch( onError );\n\n\t};\n\n\t/**\n\t * Marks the special nodes/meshes in json for efficient parse.\n\t */\n\tGLTFParser.prototype.markDefs = function () {\n\n\t\tvar nodeDefs = this.json.nodes || [];\n\t\tvar skinDefs = this.json.skins || [];\n\t\tvar meshDefs = this.json.meshes || [];\n\n\t\tvar meshReferences = {};\n\t\tvar meshUses = {};\n\n\t\t// Nothing in the node definition indicates whether it is a Bone or an\n\t\t// Object3D. Use the skins' joint references to mark bones.\n\t\tfor ( var skinIndex = 0, skinLength = skinDefs.length; skinIndex < skinLength; skinIndex ++ ) {\n\n\t\t\tvar joints = skinDefs[ skinIndex ].joints;\n\n\t\t\tfor ( var i = 0, il = joints.length; i < il; i ++ ) {\n\n\t\t\t\tnodeDefs[ joints[ i ] ].isBone = true;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Meshes can (and should) be reused by multiple nodes in a glTF asset. To\n\t\t// avoid having more than one THREE.Mesh with the same name, count\n\t\t// references and rename instances below.\n\t\t//\n\t\t// Example: CesiumMilkTruck sample model reuses \"Wheel\" meshes.\n\t\tfor ( var nodeIndex = 0, nodeLength = nodeDefs.length; nodeIndex < nodeLength; nodeIndex ++ ) {\n\n\t\t\tvar nodeDef = nodeDefs[ nodeIndex ];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tif ( meshReferences[ nodeDef.mesh ] === undefined ) {\n\n\t\t\t\t\tmeshReferences[ nodeDef.mesh ] = meshUses[ nodeDef.mesh ] = 0;\n\n\t\t\t\t}\n\n\t\t\t\tmeshReferences[ nodeDef.mesh ] ++;\n\n\t\t\t\t// Nothing in the mesh definition indicates whether it is\n\t\t\t\t// a SkinnedMesh or Mesh. Use the node's mesh reference\n\t\t\t\t// to mark SkinnedMesh if node has skin.\n\t\t\t\tif ( nodeDef.skin !== undefined ) {\n\n\t\t\t\t\tmeshDefs[ nodeDef.mesh ].isSkinnedMesh = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.json.meshReferences = meshReferences;\n\t\tthis.json.meshUses = meshUses;\n\n\t};\n\n\t/**\n\t * Requests the specified dependency asynchronously, with caching.\n\t * @param {string} type\n\t * @param {number} index\n\t * @return {Promise<THREE.Object3D|THREE.Material|THREE.Texture|THREE.AnimationClip|ArrayBuffer|Object>}\n\t */\n\tGLTFParser.prototype.getDependency = function ( type, index ) {\n\n\t\tvar cacheKey = type + ':' + index;\n\t\tvar dependency = this.cache.get( cacheKey );\n\n\t\tif ( ! dependency ) {\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'scene':\n\t\t\t\t\tdependency = this.loadScene( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'node':\n\t\t\t\t\tdependency = this.loadNode( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mesh':\n\t\t\t\t\tdependency = this.loadMesh( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'accessor':\n\t\t\t\t\tdependency = this.loadAccessor( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'bufferView':\n\t\t\t\t\tdependency = this.loadBufferView( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'buffer':\n\t\t\t\t\tdependency = this.loadBuffer( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'material':\n\t\t\t\t\tdependency = this.loadMaterial( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'texture':\n\t\t\t\t\tdependency = this.loadTexture( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'skin':\n\t\t\t\t\tdependency = this.loadSkin( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'animation':\n\t\t\t\t\tdependency = this.loadAnimation( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'camera':\n\t\t\t\t\tdependency = this.loadCamera( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'light':\n\t\t\t\t\tdependency = this.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].loadLight( index );\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'Unknown type: ' + type );\n\n\t\t\t}\n\n\t\t\tthis.cache.add( cacheKey, dependency );\n\n\t\t}\n\n\t\treturn dependency;\n\n\t};\n\n\t/**\n\t * Requests all dependencies of the specified type asynchronously, with caching.\n\t * @param {string} type\n\t * @return {Promise<Array<Object>>}\n\t */\n\tGLTFParser.prototype.getDependencies = function ( type ) {\n\n\t\tvar dependencies = this.cache.get( type );\n\n\t\tif ( ! dependencies ) {\n\n\t\t\tvar parser = this;\n\t\t\tvar defs = this.json[ type + ( type === 'mesh' ? 'es' : 's' ) ] || [];\n\n\t\t\tdependencies = Promise.all( defs.map( function ( def, index ) {\n\n\t\t\t\treturn parser.getDependency( type, index );\n\n\t\t\t} ) );\n\n\t\t\tthis.cache.add( type, dependencies );\n\n\t\t}\n\n\t\treturn dependencies;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBuffer = function ( bufferIndex ) {\n\n\t\tvar bufferDef = this.json.buffers[ bufferIndex ];\n\t\tvar loader = this.fileLoader;\n\n\t\tif ( bufferDef.type && bufferDef.type !== 'arraybuffer' ) {\n\n\t\t\tthrow new Error( 'THREE.GLTFLoader: ' + bufferDef.type + ' buffer type is not supported.' );\n\n\t\t}\n\n\t\t// If present, GLB container is required to be the first buffer.\n\t\tif ( bufferDef.uri === undefined && bufferIndex === 0 ) {\n\n\t\t\treturn Promise.resolve( this.extensions[ EXTENSIONS.KHR_BINARY_GLTF ].body );\n\n\t\t}\n\n\t\tvar options = this.options;\n\n\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\tloader.load( resolveURL( bufferDef.uri, options.path ), resolve, undefined, function () {\n\n\t\t\t\treject( new Error( 'THREE.GLTFLoader: Failed to load buffer \"' + bufferDef.uri + '\".' ) );\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#buffers-and-buffer-views\n\t * @param {number} bufferViewIndex\n\t * @return {Promise<ArrayBuffer>}\n\t */\n\tGLTFParser.prototype.loadBufferView = function ( bufferViewIndex ) {\n\n\t\tvar bufferViewDef = this.json.bufferViews[ bufferViewIndex ];\n\n\t\treturn this.getDependency( 'buffer', bufferViewDef.buffer ).then( function ( buffer ) {\n\n\t\t\tvar byteLength = bufferViewDef.byteLength || 0;\n\t\t\tvar byteOffset = bufferViewDef.byteOffset || 0;\n\t\t\treturn buffer.slice( byteOffset, byteOffset + byteLength );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#accessors\n\t * @param {number} accessorIndex\n\t * @return {Promise<THREE.BufferAttribute|THREE.InterleavedBufferAttribute>}\n\t */\n\tGLTFParser.prototype.loadAccessor = function ( accessorIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar accessorDef = this.json.accessors[ accessorIndex ];\n\n\t\tif ( accessorDef.bufferView === undefined && accessorDef.sparse === undefined ) {\n\n\t\t\t// Ignore empty accessors, which may be used to declare runtime\n\t\t\t// information about attributes coming from another source (e.g. Draco\n\t\t\t// compression extension).\n\t\t\treturn Promise.resolve( null );\n\n\t\t}\n\n\t\tvar pendingBufferViews = [];\n\n\t\tif ( accessorDef.bufferView !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.bufferView ) );\n\n\t\t} else {\n\n\t\t\tpendingBufferViews.push( null );\n\n\t\t}\n\n\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.indices.bufferView ) );\n\t\t\tpendingBufferViews.push( this.getDependency( 'bufferView', accessorDef.sparse.values.bufferView ) );\n\n\t\t}\n\n\t\treturn Promise.all( pendingBufferViews ).then( function ( bufferViews ) {\n\n\t\t\tvar bufferView = bufferViews[ 0 ];\n\n\t\t\tvar itemSize = WEBGL_TYPE_SIZES[ accessorDef.type ];\n\t\t\tvar TypedArray = WEBGL_COMPONENT_TYPES[ accessorDef.componentType ];\n\n\t\t\t// For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\t\t\tvar elementBytes = TypedArray.BYTES_PER_ELEMENT;\n\t\t\tvar itemBytes = elementBytes * itemSize;\n\t\t\tvar byteOffset = accessorDef.byteOffset || 0;\n\t\t\tvar byteStride = accessorDef.bufferView !== undefined ? json.bufferViews[ accessorDef.bufferView ].byteStride : undefined;\n\t\t\tvar normalized = accessorDef.normalized === true;\n\t\t\tvar array, bufferAttribute;\n\n\t\t\t// The buffer is not interleaved if the stride is the item size in bytes.\n\t\t\tif ( byteStride && byteStride !== itemBytes ) {\n\n\t\t\t\t// Each \"slice\" of the buffer, as defined by 'count' elements of 'byteStride' bytes, gets its own InterleavedBuffer\n\t\t\t\t// This makes sure that IBA.count reflects accessor.count properly\n\t\t\t\tvar ibSlice = Math.floor( byteOffset / byteStride );\n\t\t\t\tvar ibCacheKey = 'InterleavedBuffer:' + accessorDef.bufferView + ':' + accessorDef.componentType + ':' + ibSlice + ':' + accessorDef.count;\n\t\t\t\tvar ib = parser.cache.get( ibCacheKey );\n\n\t\t\t\tif ( ! ib ) {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, ibSlice * byteStride, accessorDef.count * byteStride / elementBytes );\n\n\t\t\t\t\t// Integer parameters to IB/IBA are in array elements, not bytes.\n\t\t\t\t\tib = new THREE.InterleavedBuffer( array, byteStride / elementBytes );\n\n\t\t\t\t\tparser.cache.add( ibCacheKey, ib );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.InterleavedBufferAttribute( ib, itemSize, ( byteOffset % byteStride ) / elementBytes, normalized );\n\n\t\t\t} else {\n\n\t\t\t\tif ( bufferView === null ) {\n\n\t\t\t\t\tarray = new TypedArray( accessorDef.count * itemSize );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tarray = new TypedArray( bufferView, byteOffset, accessorDef.count * itemSize );\n\n\t\t\t\t}\n\n\t\t\t\tbufferAttribute = new THREE.BufferAttribute( array, itemSize, normalized );\n\n\t\t\t}\n\n\t\t\t// https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#sparse-accessors\n\t\t\tif ( accessorDef.sparse !== undefined ) {\n\n\t\t\t\tvar itemSizeIndices = WEBGL_TYPE_SIZES.SCALAR;\n\t\t\t\tvar TypedArrayIndices = WEBGL_COMPONENT_TYPES[ accessorDef.sparse.indices.componentType ];\n\n\t\t\t\tvar byteOffsetIndices = accessorDef.sparse.indices.byteOffset || 0;\n\t\t\t\tvar byteOffsetValues = accessorDef.sparse.values.byteOffset || 0;\n\n\t\t\t\tvar sparseIndices = new TypedArrayIndices( bufferViews[ 1 ], byteOffsetIndices, accessorDef.sparse.count * itemSizeIndices );\n\t\t\t\tvar sparseValues = new TypedArray( bufferViews[ 2 ], byteOffsetValues, accessorDef.sparse.count * itemSize );\n\n\t\t\t\tif ( bufferView !== null ) {\n\n\t\t\t\t\t// Avoid modifying the original ArrayBuffer, if the bufferView wasn't initialized with zeroes.\n\t\t\t\t\tbufferAttribute = new THREE.BufferAttribute( bufferAttribute.array.slice(), bufferAttribute.itemSize, bufferAttribute.normalized );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var i = 0, il = sparseIndices.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar index = sparseIndices[ i ];\n\n\t\t\t\t\tbufferAttribute.setX( index, sparseValues[ i * itemSize ] );\n\t\t\t\t\tif ( itemSize >= 2 ) bufferAttribute.setY( index, sparseValues[ i * itemSize + 1 ] );\n\t\t\t\t\tif ( itemSize >= 3 ) bufferAttribute.setZ( index, sparseValues[ i * itemSize + 2 ] );\n\t\t\t\t\tif ( itemSize >= 4 ) bufferAttribute.setW( index, sparseValues[ i * itemSize + 3 ] );\n\t\t\t\t\tif ( itemSize >= 5 ) throw new Error( 'THREE.GLTFLoader: Unsupported itemSize in sparse BufferAttribute.' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bufferAttribute;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#textures\n\t * @param {number} textureIndex\n\t * @return {Promise<THREE.Texture>}\n\t */\n\tGLTFParser.prototype.loadTexture = function ( textureIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar options = this.options;\n\t\tvar textureLoader = this.textureLoader;\n\n\t\tvar URL = window.URL || window.webkitURL;\n\n\t\tvar textureDef = json.textures[ textureIndex ];\n\n\t\tvar textureExtensions = textureDef.extensions || {};\n\n\t\tvar source;\n\n\t\tif ( textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ] ) {\n\n\t\t\tsource = json.images[ textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].source ];\n\n\t\t} else {\n\n\t\t\tsource = json.images[ textureDef.source ];\n\n\t\t}\n\n\t\tvar sourceURI = source.uri;\n\t\tvar isObjectURL = false;\n\n\t\tif ( source.bufferView !== undefined ) {\n\n\t\t\t// Load binary image data from bufferView, if provided.\n\n\t\t\tsourceURI = parser.getDependency( 'bufferView', source.bufferView ).then( function ( bufferView ) {\n\n\t\t\t\tisObjectURL = true;\n\t\t\t\tvar blob = new Blob( [ bufferView ], { type: source.mimeType } );\n\t\t\t\tsourceURI = URL.createObjectURL( blob );\n\t\t\t\treturn sourceURI;\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn Promise.resolve( sourceURI ).then( function ( sourceURI ) {\n\n\t\t\t// Load Texture resource.\n\n\t\t\tvar loader = options.manager.getHandler( sourceURI );\n\n\t\t\tif ( ! loader ) {\n\n\t\t\t\tloader = textureExtensions[ EXTENSIONS.MSFT_TEXTURE_DDS ]\n\t\t\t\t\t? parser.extensions[ EXTENSIONS.MSFT_TEXTURE_DDS ].ddsLoader\n\t\t\t\t\t: textureLoader;\n\n\t\t\t}\n\n\t\t\treturn new Promise( function ( resolve, reject ) {\n\n\t\t\t\tloader.load( resolveURL( sourceURI, options.path ), resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t} ).then( function ( texture ) {\n\n\t\t\t// Clean up resources and configure Texture.\n\n\t\t\tif ( isObjectURL === true ) {\n\n\t\t\t\tURL.revokeObjectURL( sourceURI );\n\n\t\t\t}\n\n\t\t\ttexture.flipY = false;\n\n\t\t\tif ( textureDef.name !== undefined ) texture.name = textureDef.name;\n\n\t\t\t// Ignore unknown mime types, like DDS files.\n\t\t\tif ( source.mimeType in MIME_TYPE_FORMATS ) {\n\n\t\t\t\ttexture.format = MIME_TYPE_FORMATS[ source.mimeType ];\n\n\t\t\t}\n\n\t\t\tvar samplers = json.samplers || {};\n\t\t\tvar sampler = samplers[ textureDef.sampler ] || {};\n\n\t\t\ttexture.magFilter = WEBGL_FILTERS[ sampler.magFilter ] || THREE.LinearFilter;\n\t\t\ttexture.minFilter = WEBGL_FILTERS[ sampler.minFilter ] || THREE.LinearMipmapLinearFilter;\n\t\t\ttexture.wrapS = WEBGL_WRAPPINGS[ sampler.wrapS ] || THREE.RepeatWrapping;\n\t\t\ttexture.wrapT = WEBGL_WRAPPINGS[ sampler.wrapT ] || THREE.RepeatWrapping;\n\n\t\t\treturn texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Asynchronously assigns a texture to the given material parameters.\n\t * @param {Object} materialParams\n\t * @param {string} mapName\n\t * @param {Object} mapDef\n\t * @return {Promise}\n\t */\n\tGLTFParser.prototype.assignTexture = function ( materialParams, mapName, mapDef ) {\n\n\t\tvar parser = this;\n\n\t\treturn this.getDependency( 'texture', mapDef.index ).then( function ( texture ) {\n\n\t\t\tif ( ! texture.isCompressedTexture ) {\n\n\t\t\t\tswitch ( mapName ) {\n\n\t\t\t\t\tcase 'aoMap':\n\t\t\t\t\tcase 'emissiveMap':\n\t\t\t\t\tcase 'metalnessMap':\n\t\t\t\t\tcase 'normalMap':\n\t\t\t\t\tcase 'roughnessMap':\n\t\t\t\t\t\ttexture.format = THREE.RGBFormat;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] ) {\n\n\t\t\t\tvar transform = mapDef.extensions !== undefined ? mapDef.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ] : undefined;\n\n\t\t\t\tif ( transform ) {\n\n\t\t\t\t\ttexture = parser.extensions[ EXTENSIONS.KHR_TEXTURE_TRANSFORM ].extendTexture( texture, transform );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tmaterialParams[ mapName ] = texture;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Assigns final material to a Mesh, Line, or Points instance. The instance\n\t * already has a material (generated from the glTF material options alone)\n\t * but reuse of the same glTF material may require multiple threejs materials\n\t * to accomodate different primitive types, defines, etc. New materials will\n\t * be created if necessary, and reused from a cache.\n\t * @param  {THREE.Object3D} mesh Mesh, Line, or Points instance.\n\t */\n\tGLTFParser.prototype.assignFinalMaterial = function ( mesh ) {\n\n\t\tvar geometry = mesh.geometry;\n\t\tvar material = mesh.material;\n\t\tvar extensions = this.extensions;\n\n\t\tvar useVertexTangents = geometry.attributes.tangent !== undefined;\n\t\tvar useVertexColors = geometry.attributes.color !== undefined;\n\t\tvar useFlatShading = geometry.attributes.normal === undefined;\n\t\tvar useSkinning = mesh.isSkinnedMesh === true;\n\t\tvar useMorphTargets = Object.keys( geometry.morphAttributes ).length > 0;\n\t\tvar useMorphNormals = useMorphTargets && geometry.morphAttributes.normal !== undefined;\n\n\t\tif ( mesh.isPoints ) {\n\n\t\t\tvar cacheKey = 'PointsMaterial:' + material.uuid;\n\n\t\t\tvar pointsMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! pointsMaterial ) {\n\n\t\t\t\tpointsMaterial = new THREE.PointsMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( pointsMaterial, material );\n\t\t\t\tpointsMaterial.color.copy( material.color );\n\t\t\t\tpointsMaterial.map = material.map;\n\t\t\t\tpointsMaterial.sizeAttenuation = false; // glTF spec says points should be 1px\n\n\t\t\t\tthis.cache.add( cacheKey, pointsMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = pointsMaterial;\n\n\t\t} else if ( mesh.isLine ) {\n\n\t\t\tvar cacheKey = 'LineBasicMaterial:' + material.uuid;\n\n\t\t\tvar lineMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! lineMaterial ) {\n\n\t\t\t\tlineMaterial = new THREE.LineBasicMaterial();\n\t\t\t\tTHREE.Material.prototype.copy.call( lineMaterial, material );\n\t\t\t\tlineMaterial.color.copy( material.color );\n\n\t\t\t\tthis.cache.add( cacheKey, lineMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = lineMaterial;\n\n\t\t}\n\n\t\t// Clone the material if it will be modified\n\t\tif ( useVertexTangents || useVertexColors || useFlatShading || useSkinning || useMorphTargets ) {\n\n\t\t\tvar cacheKey = 'ClonedMaterial:' + material.uuid + ':';\n\n\t\t\tif ( material.isGLTFSpecularGlossinessMaterial ) cacheKey += 'specular-glossiness:';\n\t\t\tif ( useSkinning ) cacheKey += 'skinning:';\n\t\t\tif ( useVertexTangents ) cacheKey += 'vertex-tangents:';\n\t\t\tif ( useVertexColors ) cacheKey += 'vertex-colors:';\n\t\t\tif ( useFlatShading ) cacheKey += 'flat-shading:';\n\t\t\tif ( useMorphTargets ) cacheKey += 'morph-targets:';\n\t\t\tif ( useMorphNormals ) cacheKey += 'morph-normals:';\n\n\t\t\tvar cachedMaterial = this.cache.get( cacheKey );\n\n\t\t\tif ( ! cachedMaterial ) {\n\n\t\t\t\tcachedMaterial = material.isGLTFSpecularGlossinessMaterial\n\t\t\t\t\t? extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].cloneMaterial( material )\n\t\t\t\t\t: material.clone();\n\n\t\t\t\tif ( useSkinning ) cachedMaterial.skinning = true;\n\t\t\t\tif ( useVertexTangents ) cachedMaterial.vertexTangents = true;\n\t\t\t\tif ( useVertexColors ) cachedMaterial.vertexColors = THREE.VertexColors;\n\t\t\t\tif ( useFlatShading ) cachedMaterial.flatShading = true;\n\t\t\t\tif ( useMorphTargets ) cachedMaterial.morphTargets = true;\n\t\t\t\tif ( useMorphNormals ) cachedMaterial.morphNormals = true;\n\n\t\t\t\tthis.cache.add( cacheKey, cachedMaterial );\n\n\t\t\t}\n\n\t\t\tmaterial = cachedMaterial;\n\n\t\t}\n\n\t\t// workarounds for mesh and geometry\n\n\t\tif ( material.aoMap && geometry.attributes.uv2 === undefined && geometry.attributes.uv !== undefined ) {\n\n\t\t\tconsole.log( 'THREE.GLTFLoader: Duplicating UVs to support aoMap.' );\n\t\t\tgeometry.setAttribute( 'uv2', new THREE.BufferAttribute( geometry.attributes.uv.array, 2 ) );\n\n\t\t}\n\n\t\tif ( material.isGLTFSpecularGlossinessMaterial ) {\n\n\t\t\t// for GLTFSpecularGlossinessMaterial(ShaderMaterial) uniforms runtime update\n\t\t\tmesh.onBeforeRender = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].refreshUniforms;\n\n\t\t}\n\n\t\tmesh.material = material;\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#materials\n\t * @param {number} materialIndex\n\t * @return {Promise<THREE.Material>}\n\t */\n\tGLTFParser.prototype.loadMaterial = function ( materialIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar materialDef = json.materials[ materialIndex ];\n\n\t\tvar materialType;\n\t\tvar materialParams = {};\n\t\tvar materialExtensions = materialDef.extensions || {};\n\n\t\tvar pending = [];\n\n\t\tif ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ] ) {\n\n\t\t\tvar sgExtension = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ];\n\t\t\tmaterialType = sgExtension.getMaterialType();\n\t\t\tpending.push( sgExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else if ( materialExtensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ] ) {\n\n\t\t\tvar kmuExtension = extensions[ EXTENSIONS.KHR_MATERIALS_UNLIT ];\n\t\t\tmaterialType = kmuExtension.getMaterialType();\n\t\t\tpending.push( kmuExtension.extendParams( materialParams, materialDef, parser ) );\n\n\t\t} else {\n\n\t\t\t// Specification:\n\t\t\t// https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#metallic-roughness-material\n\n\t\t\tmaterialType = THREE.MeshStandardMaterial;\n\n\t\t\tvar metallicRoughness = materialDef.pbrMetallicRoughness || {};\n\n\t\t\tmaterialParams.color = new THREE.Color( 1.0, 1.0, 1.0 );\n\t\t\tmaterialParams.opacity = 1.0;\n\n\t\t\tif ( Array.isArray( metallicRoughness.baseColorFactor ) ) {\n\n\t\t\t\tvar array = metallicRoughness.baseColorFactor;\n\n\t\t\t\tmaterialParams.color.fromArray( array );\n\t\t\t\tmaterialParams.opacity = array[ 3 ];\n\n\t\t\t}\n\n\t\t\tif ( metallicRoughness.baseColorTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'map', metallicRoughness.baseColorTexture ) );\n\n\t\t\t}\n\n\t\t\tmaterialParams.metalness = metallicRoughness.metallicFactor !== undefined ? metallicRoughness.metallicFactor : 1.0;\n\t\t\tmaterialParams.roughness = metallicRoughness.roughnessFactor !== undefined ? metallicRoughness.roughnessFactor : 1.0;\n\n\t\t\tif ( metallicRoughness.metallicRoughnessTexture !== undefined ) {\n\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'metalnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\t\t\t\tpending.push( parser.assignTexture( materialParams, 'roughnessMap', metallicRoughness.metallicRoughnessTexture ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.doubleSided === true ) {\n\n\t\t\tmaterialParams.side = THREE.DoubleSide;\n\n\t\t}\n\n\t\tvar alphaMode = materialDef.alphaMode || ALPHA_MODES.OPAQUE;\n\n\t\tif ( alphaMode === ALPHA_MODES.BLEND ) {\n\n\t\t\tmaterialParams.transparent = true;\n\n\t\t} else {\n\n\t\t\tmaterialParams.transparent = false;\n\n\t\t\tif ( alphaMode === ALPHA_MODES.MASK ) {\n\n\t\t\t\tmaterialParams.alphaTest = materialDef.alphaCutoff !== undefined ? materialDef.alphaCutoff : 0.5;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.normalTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'normalMap', materialDef.normalTexture ) );\n\n\t\t\tmaterialParams.normalScale = new THREE.Vector2( 1, 1 );\n\n\t\t\tif ( materialDef.normalTexture.scale !== undefined ) {\n\n\t\t\t\tmaterialParams.normalScale.set( materialDef.normalTexture.scale, materialDef.normalTexture.scale );\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.occlusionTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'aoMap', materialDef.occlusionTexture ) );\n\n\t\t\tif ( materialDef.occlusionTexture.strength !== undefined ) {\n\n\t\t\t\tmaterialParams.aoMapIntensity = materialDef.occlusionTexture.strength;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( materialDef.emissiveFactor !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tmaterialParams.emissive = new THREE.Color().fromArray( materialDef.emissiveFactor );\n\n\t\t}\n\n\t\tif ( materialDef.emissiveTexture !== undefined && materialType !== THREE.MeshBasicMaterial ) {\n\n\t\t\tpending.push( parser.assignTexture( materialParams, 'emissiveMap', materialDef.emissiveTexture ) );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\tvar material;\n\n\t\t\tif ( materialType === THREE.ShaderMaterial ) {\n\n\t\t\t\tmaterial = extensions[ EXTENSIONS.KHR_MATERIALS_PBR_SPECULAR_GLOSSINESS ].createMaterial( materialParams );\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new materialType( materialParams );\n\n\t\t\t}\n\n\t\t\tif ( materialDef.name !== undefined ) material.name = materialDef.name;\n\n\t\t\t// baseColorTexture, emissiveTexture, and specularGlossinessTexture use sRGB encoding.\n\t\t\tif ( material.map ) material.map.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.emissiveMap ) material.emissiveMap.encoding = THREE.sRGBEncoding;\n\t\t\tif ( material.specularMap ) material.specularMap.encoding = THREE.sRGBEncoding;\n\n\t\t\tassignExtrasToUserData( material, materialDef );\n\n\t\t\tif ( materialDef.extensions ) addUnknownExtensionsToUserData( extensions, material, materialDef );\n\n\t\t\treturn material;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t */\n\tfunction computeBounds( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar box = new THREE.Box3();\n\n\t\tif ( attributes.POSITION !== undefined ) {\n\n\t\t\tvar accessor = parser.json.accessors[ attributes.POSITION ];\n\t\t\tvar min = accessor.min;\n\t\t\tvar max = accessor.max;\n\n\t\t\tbox.set(\n\t\t\t\tnew THREE.Vector3( min[ 0 ], min[ 1 ], min[ 2 ] ),\n\t\t\t\tnew THREE.Vector3( max[ 0 ], max[ 1 ], max[ 2 ] ) );\n\n\t\t} else {\n\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar targets = primitiveDef.targets;\n\n\t\tif ( targets !== undefined ) {\n\n\t\t\tvar vector = new THREE.Vector3();\n\n\t\t\tfor ( var i = 0, il = targets.length; i < il; i ++ ) {\n\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( target.POSITION !== undefined ) {\n\n\t\t\t\t\tvar accessor = parser.json.accessors[ target.POSITION ];\n\t\t\t\t\tvar min = accessor.min;\n\t\t\t\t\tvar max = accessor.max;\n\n\t\t\t\t\t// we need to get max of absolute components because target weight is [-1,1]\n\t\t\t\t\tvector.setX( Math.max( Math.abs( min[ 0 ] ), Math.abs( max[ 0 ] ) ) );\n\t\t\t\t\tvector.setY( Math.max( Math.abs( min[ 1 ] ), Math.abs( max[ 1 ] ) ) );\n\t\t\t\t\tvector.setZ( Math.max( Math.abs( min[ 2 ] ), Math.abs( max[ 2 ] ) ) );\n\n\t\t\t\t\tbox.expandByVector( vector );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tgeometry.boundingBox = box;\n\n\t\tvar sphere = new THREE.Sphere();\n\n\t\tbox.getCenter( sphere.center );\n\t\tsphere.radius = box.min.distanceTo( box.max ) / 2;\n\n\t\tgeometry.boundingSphere = sphere;\n\n\t}\n\n\t/**\n\t * @param {THREE.BufferGeometry} geometry\n\t * @param {GLTF.Primitive} primitiveDef\n\t * @param {GLTFParser} parser\n\t * @return {Promise<THREE.BufferGeometry>}\n\t */\n\tfunction addPrimitiveAttributes( geometry, primitiveDef, parser ) {\n\n\t\tvar attributes = primitiveDef.attributes;\n\n\t\tvar pending = [];\n\n\t\tfunction assignAttributeAccessor( accessorIndex, attributeName ) {\n\n\t\t\treturn parser.getDependency( 'accessor', accessorIndex )\n\t\t\t\t.then( function ( accessor ) {\n\n\t\t\t\t\tgeometry.setAttribute( attributeName, accessor );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tfor ( var gltfAttributeName in attributes ) {\n\n\t\t\tvar threeAttributeName = ATTRIBUTES[ gltfAttributeName ] || gltfAttributeName.toLowerCase();\n\n\t\t\t// Skip attributes already provided by e.g. Draco extension.\n\t\t\tif ( threeAttributeName in geometry.attributes ) continue;\n\n\t\t\tpending.push( assignAttributeAccessor( attributes[ gltfAttributeName ], threeAttributeName ) );\n\n\t\t}\n\n\t\tif ( primitiveDef.indices !== undefined && ! geometry.index ) {\n\n\t\t\tvar accessor = parser.getDependency( 'accessor', primitiveDef.indices ).then( function ( accessor ) {\n\n\t\t\t\tgeometry.setIndex( accessor );\n\n\t\t\t} );\n\n\t\t\tpending.push( accessor );\n\n\t\t}\n\n\t\tassignExtrasToUserData( geometry, primitiveDef );\n\n\t\tcomputeBounds( geometry, primitiveDef, parser );\n\n\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\treturn primitiveDef.targets !== undefined\n\t\t\t\t? addMorphTargets( geometry, primitiveDef.targets, parser )\n\t\t\t\t: geometry;\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#geometry\n\t *\n\t * Creates BufferGeometries from primitives.\n\t *\n\t * @param {Array<GLTF.Primitive>} primitives\n\t * @return {Promise<Array<THREE.BufferGeometry>>}\n\t */\n\tGLTFParser.prototype.loadGeometries = function ( primitives ) {\n\n\t\tvar parser = this;\n\t\tvar extensions = this.extensions;\n\t\tvar cache = this.primitiveCache;\n\n\t\tfunction createDracoPrimitive( primitive ) {\n\n\t\t\treturn extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ]\n\t\t\t\t.decodePrimitive( primitive, parser )\n\t\t\t\t.then( function ( geometry ) {\n\n\t\t\t\t\treturn addPrimitiveAttributes( geometry, primitive, parser );\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar primitive = primitives[ i ];\n\t\t\tvar cacheKey = createPrimitiveKey( primitive );\n\n\t\t\t// See if we've already created this geometry\n\t\t\tvar cached = cache[ cacheKey ];\n\n\t\t\tif ( cached ) {\n\n\t\t\t\t// Use the cached geometry if it exists\n\t\t\t\tpending.push( cached.promise );\n\n\t\t\t} else {\n\n\t\t\t\tvar geometryPromise;\n\n\t\t\t\tif ( primitive.extensions && primitive.extensions[ EXTENSIONS.KHR_DRACO_MESH_COMPRESSION ] ) {\n\n\t\t\t\t\t// Use DRACO geometry if available\n\t\t\t\t\tgeometryPromise = createDracoPrimitive( primitive );\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Otherwise create a new geometry\n\t\t\t\t\tgeometryPromise = addPrimitiveAttributes( new THREE.BufferGeometry(), primitive, parser );\n\n\t\t\t\t}\n\n\t\t\t\t// Cache this geometry\n\t\t\t\tcache[ cacheKey ] = { primitive: primitive, promise: geometryPromise };\n\n\t\t\t\tpending.push( geometryPromise );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn Promise.all( pending );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#meshes\n\t * @param {number} meshIndex\n\t * @return {Promise<THREE.Group|THREE.Mesh|THREE.SkinnedMesh>}\n\t */\n\tGLTFParser.prototype.loadMesh = function ( meshIndex ) {\n\n\t\tvar parser = this;\n\t\tvar json = this.json;\n\n\t\tvar meshDef = json.meshes[ meshIndex ];\n\t\tvar primitives = meshDef.primitives;\n\n\t\tvar pending = [];\n\n\t\tfor ( var i = 0, il = primitives.length; i < il; i ++ ) {\n\n\t\t\tvar material = primitives[ i ].material === undefined\n\t\t\t\t? createDefaultMaterial()\n\t\t\t\t: this.getDependency( 'material', primitives[ i ].material );\n\n\t\t\tpending.push( material );\n\n\t\t}\n\n\t\treturn Promise.all( pending ).then( function ( originalMaterials ) {\n\n\t\t\treturn parser.loadGeometries( primitives ).then( function ( geometries ) {\n\n\t\t\t\tvar meshes = [];\n\n\t\t\t\tfor ( var i = 0, il = geometries.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar geometry = geometries[ i ];\n\t\t\t\t\tvar primitive = primitives[ i ];\n\n\t\t\t\t\t// 1. create Mesh\n\n\t\t\t\t\tvar mesh;\n\n\t\t\t\t\tvar material = originalMaterials[ i ];\n\n\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLES ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ||\n\t\t\t\t\t\tprimitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ||\n\t\t\t\t\t\tprimitive.mode === undefined ) {\n\n\t\t\t\t\t\t// .isSkinnedMesh isn't in glTF spec. See .markDefs()\n\t\t\t\t\t\tmesh = meshDef.isSkinnedMesh === true\n\t\t\t\t\t\t\t? new THREE.SkinnedMesh( geometry, material )\n\t\t\t\t\t\t\t: new THREE.Mesh( geometry, material );\n\n\t\t\t\t\t\tif ( mesh.isSkinnedMesh === true && ! mesh.geometry.attributes.skinWeight.normalized ) {\n\n\t\t\t\t\t\t\t// we normalize floating point skin weight array to fix malformed assets (see #15319)\n\t\t\t\t\t\t\t// it's important to skip this for non-float32 data since normalizeSkinWeights assumes non-normalized inputs\n\t\t\t\t\t\t\tmesh.normalizeSkinWeights();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_STRIP ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleStripDrawMode;\n\n\t\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.TRIANGLE_FAN ) {\n\n\t\t\t\t\t\t\tmesh.drawMode = THREE.TriangleFanDrawMode;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINES ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineSegments( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_STRIP ) {\n\n\t\t\t\t\t\tmesh = new THREE.Line( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.LINE_LOOP ) {\n\n\t\t\t\t\t\tmesh = new THREE.LineLoop( geometry, material );\n\n\t\t\t\t\t} else if ( primitive.mode === WEBGL_CONSTANTS.POINTS ) {\n\n\t\t\t\t\t\tmesh = new THREE.Points( geometry, material );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Primitive mode unsupported: ' + primitive.mode );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( Object.keys( mesh.geometry.morphAttributes ).length > 0 ) {\n\n\t\t\t\t\t\tupdateMorphTargets( mesh, meshDef );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmesh.name = meshDef.name || ( 'mesh_' + meshIndex );\n\n\t\t\t\t\tif ( geometries.length > 1 ) mesh.name += '_' + i;\n\n\t\t\t\t\tassignExtrasToUserData( mesh, meshDef );\n\n\t\t\t\t\tparser.assignFinalMaterial( mesh );\n\n\t\t\t\t\tmeshes.push( mesh );\n\n\t\t\t\t}\n\n\t\t\t\tif ( meshes.length === 1 ) {\n\n\t\t\t\t\treturn meshes[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar group = new THREE.Group();\n\n\t\t\t\tfor ( var i = 0, il = meshes.length; i < il; i ++ ) {\n\n\t\t\t\t\tgroup.add( meshes[ i ] );\n\n\t\t\t\t}\n\n\t\t\t\treturn group;\n\n\t\t\t} );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#cameras\n\t * @param {number} cameraIndex\n\t * @return {Promise<THREE.Camera>}\n\t */\n\tGLTFParser.prototype.loadCamera = function ( cameraIndex ) {\n\n\t\tvar camera;\n\t\tvar cameraDef = this.json.cameras[ cameraIndex ];\n\t\tvar params = cameraDef[ cameraDef.type ];\n\n\t\tif ( ! params ) {\n\n\t\t\tconsole.warn( 'THREE.GLTFLoader: Missing camera parameters.' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( cameraDef.type === 'perspective' ) {\n\n\t\t\tcamera = new THREE.PerspectiveCamera( THREE.Math.radToDeg( params.yfov ), params.aspectRatio || 1, params.znear || 1, params.zfar || 2e6 );\n\n\t\t} else if ( cameraDef.type === 'orthographic' ) {\n\n\t\t\tcamera = new THREE.OrthographicCamera( params.xmag / - 2, params.xmag / 2, params.ymag / 2, params.ymag / - 2, params.znear, params.zfar );\n\n\t\t}\n\n\t\tif ( cameraDef.name !== undefined ) camera.name = cameraDef.name;\n\n\t\tassignExtrasToUserData( camera, cameraDef );\n\n\t\treturn Promise.resolve( camera );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#skins\n\t * @param {number} skinIndex\n\t * @return {Promise<Object>}\n\t */\n\tGLTFParser.prototype.loadSkin = function ( skinIndex ) {\n\n\t\tvar skinDef = this.json.skins[ skinIndex ];\n\n\t\tvar skinEntry = { joints: skinDef.joints };\n\n\t\tif ( skinDef.inverseBindMatrices === undefined ) {\n\n\t\t\treturn Promise.resolve( skinEntry );\n\n\t\t}\n\n\t\treturn this.getDependency( 'accessor', skinDef.inverseBindMatrices ).then( function ( accessor ) {\n\n\t\t\tskinEntry.inverseBindMatrices = accessor;\n\n\t\t\treturn skinEntry;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#animations\n\t * @param {number} animationIndex\n\t * @return {Promise<THREE.AnimationClip>}\n\t */\n\tGLTFParser.prototype.loadAnimation = function ( animationIndex ) {\n\n\t\tvar json = this.json;\n\n\t\tvar animationDef = json.animations[ animationIndex ];\n\n\t\tvar pendingNodes = [];\n\t\tvar pendingInputAccessors = [];\n\t\tvar pendingOutputAccessors = [];\n\t\tvar pendingSamplers = [];\n\t\tvar pendingTargets = [];\n\n\t\tfor ( var i = 0, il = animationDef.channels.length; i < il; i ++ ) {\n\n\t\t\tvar channel = animationDef.channels[ i ];\n\t\t\tvar sampler = animationDef.samplers[ channel.sampler ];\n\t\t\tvar target = channel.target;\n\t\t\tvar name = target.node !== undefined ? target.node : target.id; // NOTE: target.id is deprecated.\n\t\t\tvar input = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.input ] : sampler.input;\n\t\t\tvar output = animationDef.parameters !== undefined ? animationDef.parameters[ sampler.output ] : sampler.output;\n\n\t\t\tpendingNodes.push( this.getDependency( 'node', name ) );\n\t\t\tpendingInputAccessors.push( this.getDependency( 'accessor', input ) );\n\t\t\tpendingOutputAccessors.push( this.getDependency( 'accessor', output ) );\n\t\t\tpendingSamplers.push( sampler );\n\t\t\tpendingTargets.push( target );\n\n\t\t}\n\n\t\treturn Promise.all( [\n\n\t\t\tPromise.all( pendingNodes ),\n\t\t\tPromise.all( pendingInputAccessors ),\n\t\t\tPromise.all( pendingOutputAccessors ),\n\t\t\tPromise.all( pendingSamplers ),\n\t\t\tPromise.all( pendingTargets )\n\n\t\t] ).then( function ( dependencies ) {\n\n\t\t\tvar nodes = dependencies[ 0 ];\n\t\t\tvar inputAccessors = dependencies[ 1 ];\n\t\t\tvar outputAccessors = dependencies[ 2 ];\n\t\t\tvar samplers = dependencies[ 3 ];\n\t\t\tvar targets = dependencies[ 4 ];\n\n\t\t\tvar tracks = [];\n\n\t\t\tfor ( var i = 0, il = nodes.length; i < il; i ++ ) {\n\n\t\t\t\tvar node = nodes[ i ];\n\t\t\t\tvar inputAccessor = inputAccessors[ i ];\n\t\t\t\tvar outputAccessor = outputAccessors[ i ];\n\t\t\t\tvar sampler = samplers[ i ];\n\t\t\t\tvar target = targets[ i ];\n\n\t\t\t\tif ( node === undefined ) continue;\n\n\t\t\t\tnode.updateMatrix();\n\t\t\t\tnode.matrixAutoUpdate = true;\n\n\t\t\t\tvar TypedKeyframeTrack;\n\n\t\t\t\tswitch ( PATH_PROPERTIES[ target.path ] ) {\n\n\t\t\t\t\tcase PATH_PROPERTIES.weights:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.NumberKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.rotation:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.QuaternionKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase PATH_PROPERTIES.position:\n\t\t\t\t\tcase PATH_PROPERTIES.scale:\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tTypedKeyframeTrack = THREE.VectorKeyframeTrack;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar targetName = node.name ? node.name : node.uuid;\n\n\t\t\t\tvar interpolation = sampler.interpolation !== undefined ? INTERPOLATION[ sampler.interpolation ] : THREE.InterpolateLinear;\n\n\t\t\t\tvar targetNames = [];\n\n\t\t\t\tif ( PATH_PROPERTIES[ target.path ] === PATH_PROPERTIES.weights ) {\n\n\t\t\t\t\t// Node may be a THREE.Group (glTF mesh with several primitives) or a THREE.Mesh.\n\t\t\t\t\tnode.traverse( function ( object ) {\n\n\t\t\t\t\t\tif ( object.isMesh === true && object.morphTargetInfluences ) {\n\n\t\t\t\t\t\t\ttargetNames.push( object.name ? object.name : object.uuid );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttargetNames.push( targetName );\n\n\t\t\t\t}\n\n\t\t\t\tvar outputArray = outputAccessor.array;\n\n\t\t\t\tif ( outputAccessor.normalized ) {\n\n\t\t\t\t\tvar scale;\n\n\t\t\t\t\tif ( outputArray.constructor === Int8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 127;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint8Array ) {\n\n\t\t\t\t\t\tscale = 1 / 255;\n\n\t\t\t\t\t} else if ( outputArray.constructor == Int16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 32767;\n\n\t\t\t\t\t} else if ( outputArray.constructor === Uint16Array ) {\n\n\t\t\t\t\t\tscale = 1 / 65535;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tthrow new Error( 'THREE.GLTFLoader: Unsupported output accessor component type.' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar scaled = new Float32Array( outputArray.length );\n\n\t\t\t\t\tfor ( var j = 0, jl = outputArray.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tscaled[ j ] = outputArray[ j ] * scale;\n\n\t\t\t\t\t}\n\n\t\t\t\t\toutputArray = scaled;\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var j = 0, jl = targetNames.length; j < jl; j ++ ) {\n\n\t\t\t\t\tvar track = new TypedKeyframeTrack(\n\t\t\t\t\t\ttargetNames[ j ] + '.' + PATH_PROPERTIES[ target.path ],\n\t\t\t\t\t\tinputAccessor.array,\n\t\t\t\t\t\toutputArray,\n\t\t\t\t\t\tinterpolation\n\t\t\t\t\t);\n\n\t\t\t\t\t// Override interpolation with custom factory method.\n\t\t\t\t\tif ( sampler.interpolation === 'CUBICSPLINE' ) {\n\n\t\t\t\t\t\ttrack.createInterpolant = function InterpolantFactoryMethodGLTFCubicSpline( result ) {\n\n\t\t\t\t\t\t\t// A CUBICSPLINE keyframe in glTF has three output values for each input value,\n\t\t\t\t\t\t\t// representing inTangent, splineVertex, and outTangent. As a result, track.getValueSize()\n\t\t\t\t\t\t\t// must be divided by three to get the interpolant's sampleSize argument.\n\n\t\t\t\t\t\t\treturn new GLTFCubicSplineInterpolant( this.times, this.values, this.getValueSize() / 3, result );\n\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Mark as CUBICSPLINE. `track.getInterpolation()` doesn't support custom interpolants.\n\t\t\t\t\t\ttrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t\ttracks.push( track );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = animationDef.name !== undefined ? animationDef.name : 'animation_' + animationIndex;\n\n\t\t\treturn new THREE.AnimationClip( name, undefined, tracks );\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#nodes-and-hierarchy\n\t * @param {number} nodeIndex\n\t * @return {Promise<THREE.Object3D>}\n\t */\n\tGLTFParser.prototype.loadNode = function ( nodeIndex ) {\n\n\t\tvar json = this.json;\n\t\tvar extensions = this.extensions;\n\t\tvar parser = this;\n\n\t\tvar meshReferences = json.meshReferences;\n\t\tvar meshUses = json.meshUses;\n\n\t\tvar nodeDef = json.nodes[ nodeIndex ];\n\n\t\treturn ( function () {\n\n\t\t\tvar pending = [];\n\n\t\t\tif ( nodeDef.mesh !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'mesh', nodeDef.mesh ).then( function ( mesh ) {\n\n\t\t\t\t\tvar node;\n\n\t\t\t\t\tif ( meshReferences[ nodeDef.mesh ] > 1 ) {\n\n\t\t\t\t\t\tvar instanceNum = meshUses[ nodeDef.mesh ] ++;\n\n\t\t\t\t\t\tnode = mesh.clone();\n\t\t\t\t\t\tnode.name += '_instance_' + instanceNum;\n\n\t\t\t\t\t\t// onBeforeRender copy for Specular-Glossiness\n\t\t\t\t\t\tnode.onBeforeRender = mesh.onBeforeRender;\n\n\t\t\t\t\t\tfor ( var i = 0, il = node.children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\tnode.children[ i ].name += '_instance_' + instanceNum;\n\t\t\t\t\t\t\tnode.children[ i ].onBeforeRender = mesh.children[ i ].onBeforeRender;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnode = mesh;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if weights are provided on the node, override weights on the mesh.\n\t\t\t\t\tif ( nodeDef.weights !== undefined ) {\n\n\t\t\t\t\t\tnode.traverse( function ( o ) {\n\n\t\t\t\t\t\t\tif ( ! o.isMesh ) return;\n\n\t\t\t\t\t\t\tfor ( var i = 0, il = nodeDef.weights.length; i < il; i ++ ) {\n\n\t\t\t\t\t\t\t\to.morphTargetInfluences[ i ] = nodeDef.weights[ i ];\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.camera !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'camera', nodeDef.camera ) );\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.extensions\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ]\n\t\t\t\t&& nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light !== undefined ) {\n\n\t\t\t\tpending.push( parser.getDependency( 'light', nodeDef.extensions[ EXTENSIONS.KHR_LIGHTS_PUNCTUAL ].light ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending );\n\n\t\t}() ).then( function ( objects ) {\n\n\t\t\tvar node;\n\n\t\t\t// .isBone isn't in glTF spec. See .markDefs\n\t\t\tif ( nodeDef.isBone === true ) {\n\n\t\t\t\tnode = new THREE.Bone();\n\n\t\t\t} else if ( objects.length > 1 ) {\n\n\t\t\t\tnode = new THREE.Group();\n\n\t\t\t} else if ( objects.length === 1 ) {\n\n\t\t\t\tnode = objects[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tnode = new THREE.Object3D();\n\n\t\t\t}\n\n\t\t\tif ( node !== objects[ 0 ] ) {\n\n\t\t\t\tfor ( var i = 0, il = objects.length; i < il; i ++ ) {\n\n\t\t\t\t\tnode.add( objects[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( nodeDef.name !== undefined ) {\n\n\t\t\t\tnode.userData.name = nodeDef.name;\n\t\t\t\tnode.name = THREE.PropertyBinding.sanitizeNodeName( nodeDef.name );\n\n\t\t\t}\n\n\t\t\tassignExtrasToUserData( node, nodeDef );\n\n\t\t\tif ( nodeDef.extensions ) addUnknownExtensionsToUserData( extensions, node, nodeDef );\n\n\t\t\tif ( nodeDef.matrix !== undefined ) {\n\n\t\t\t\tvar matrix = new THREE.Matrix4();\n\t\t\t\tmatrix.fromArray( nodeDef.matrix );\n\t\t\t\tnode.applyMatrix( matrix );\n\n\t\t\t} else {\n\n\t\t\t\tif ( nodeDef.translation !== undefined ) {\n\n\t\t\t\t\tnode.position.fromArray( nodeDef.translation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.rotation !== undefined ) {\n\n\t\t\t\t\tnode.quaternion.fromArray( nodeDef.rotation );\n\n\t\t\t\t}\n\n\t\t\t\tif ( nodeDef.scale !== undefined ) {\n\n\t\t\t\t\tnode.scale.fromArray( nodeDef.scale );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn node;\n\n\t\t} );\n\n\t};\n\n\t/**\n\t * Specification: https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#scenes\n\t * @param {number} sceneIndex\n\t * @return {Promise<THREE.Scene>}\n\t */\n\tGLTFParser.prototype.loadScene = function () {\n\n\t\t// scene node hierachy builder\n\n\t\tfunction buildNodeHierachy( nodeId, parentObject, json, parser ) {\n\n\t\t\tvar nodeDef = json.nodes[ nodeId ];\n\n\t\t\treturn parser.getDependency( 'node', nodeId ).then( function ( node ) {\n\n\t\t\t\tif ( nodeDef.skin === undefined ) return node;\n\n\t\t\t\t// build skeleton here as well\n\n\t\t\t\tvar skinEntry;\n\n\t\t\t\treturn parser.getDependency( 'skin', nodeDef.skin ).then( function ( skin ) {\n\n\t\t\t\t\tskinEntry = skin;\n\n\t\t\t\t\tvar pendingJoints = [];\n\n\t\t\t\t\tfor ( var i = 0, il = skinEntry.joints.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tpendingJoints.push( parser.getDependency( 'node', skinEntry.joints[ i ] ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.all( pendingJoints );\n\n\t\t\t\t} ).then( function ( jointNodes ) {\n\n\t\t\t\t\tnode.traverse( function ( mesh ) {\n\n\t\t\t\t\t\tif ( ! mesh.isMesh ) return;\n\n\t\t\t\t\t\tvar bones = [];\n\t\t\t\t\t\tvar boneInverses = [];\n\n\t\t\t\t\t\tfor ( var j = 0, jl = jointNodes.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\t\tvar jointNode = jointNodes[ j ];\n\n\t\t\t\t\t\t\tif ( jointNode ) {\n\n\t\t\t\t\t\t\t\tbones.push( jointNode );\n\n\t\t\t\t\t\t\t\tvar mat = new THREE.Matrix4();\n\n\t\t\t\t\t\t\t\tif ( skinEntry.inverseBindMatrices !== undefined ) {\n\n\t\t\t\t\t\t\t\t\tmat.fromArray( skinEntry.inverseBindMatrices.array, j * 16 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tboneInverses.push( mat );\n\n\t\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t\tconsole.warn( 'THREE.GLTFLoader: Joint \"%s\" could not be found.', skinEntry.joints[ j ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmesh.bind( new THREE.Skeleton( bones, boneInverses ), mesh.matrixWorld );\n\n\t\t\t\t\t} );\n\n\t\t\t\t\treturn node;\n\n\t\t\t\t} );\n\n\t\t\t} ).then( function ( node ) {\n\n\t\t\t\t// build node hierachy\n\n\t\t\t\tparentObject.add( node );\n\n\t\t\t\tvar pending = [];\n\n\t\t\t\tif ( nodeDef.children ) {\n\n\t\t\t\t\tvar children = nodeDef.children;\n\n\t\t\t\t\tfor ( var i = 0, il = children.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar child = children[ i ];\n\t\t\t\t\t\tpending.push( buildNodeHierachy( child, node, json, parser ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all( pending );\n\n\t\t\t} );\n\n\t\t}\n\n\t\treturn function loadScene( sceneIndex ) {\n\n\t\t\tvar json = this.json;\n\t\t\tvar extensions = this.extensions;\n\t\t\tvar sceneDef = this.json.scenes[ sceneIndex ];\n\t\t\tvar parser = this;\n\n\t\t\tvar scene = new THREE.Scene();\n\t\t\tif ( sceneDef.name !== undefined ) scene.name = sceneDef.name;\n\n\t\t\tassignExtrasToUserData( scene, sceneDef );\n\n\t\t\tif ( sceneDef.extensions ) addUnknownExtensionsToUserData( extensions, scene, sceneDef );\n\n\t\t\tvar nodeIds = sceneDef.nodes || [];\n\n\t\t\tvar pending = [];\n\n\t\t\tfor ( var i = 0, il = nodeIds.length; i < il; i ++ ) {\n\n\t\t\t\tpending.push( buildNodeHierachy( nodeIds[ i ], scene, json, parser ) );\n\n\t\t\t}\n\n\t\t\treturn Promise.all( pending ).then( function () {\n\n\t\t\t\treturn scene;\n\n\t\t\t} );\n\n\t\t};\n\n\t}();\n\n\treturn GLTFLoader;\n\n} )();\n\n\nmodule.exports = _GLTFLoader;\n"]},"metadata":{},"sourceType":"script"}