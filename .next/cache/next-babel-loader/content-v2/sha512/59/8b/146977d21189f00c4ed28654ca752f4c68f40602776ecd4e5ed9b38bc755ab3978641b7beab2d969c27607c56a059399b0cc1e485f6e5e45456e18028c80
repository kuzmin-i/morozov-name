{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/ikuzmin/Documents/morozov-name/pages/three-model.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useRef, useState, useEffect } from 'react';\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber';\nimport * as THREE from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport Model from '../components/model';\n\nconst Buildings = () => {\n  const mesh = useRef();\n  const [gltf] = useLoader(new GLTFLoader(), 'models/1.glb');\n  useEffect(() => {\n    if (gltf) {\n      mesh.current = new THREE.AnimationMixer(gltf.scene);\n      console.log(gltf.scene);\n    }\n  }, [gltf]);\n  return gltf ? /*#__PURE__*/_jsxDEV(\"primitive\", {\n    object: gltf.scene\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 17\n  }, this) : null;\n};\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef();\n  console.log(mesh); // Set up state for the hovered and active state\n\n  const {\n    0: hovered,\n    1: setHover\n  } = useState(false);\n  const {\n    0: active,\n    1: setActive\n  } = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"mesh\", _objectSpread(_objectSpread({}, props), {}, {\n    ref: mesh,\n    scale: active ? [1.5, 1.5, 1.5] : [1, 1, 1],\n    onClick: event => setActive(!active),\n    onPointerOver: event => setHover(true),\n    onPointerOut: event => setHover(false),\n    children: [/*#__PURE__*/_jsxDEV(\"boxBufferGeometry\", {\n      args: [1, 1, 1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshStandardMaterial\", {\n      color: hovered ? 'hotpink' : 'orange'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\nconst ThreeRender = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: [/*#__PURE__*/_jsxDEV(Model, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Canvas, {\n      children: [/*#__PURE__*/_jsxDEV(Buildings, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ambientLight\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [-1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        position: [1.2, 0, 0]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\nexport default ThreeRender;","map":{"version":3,"sources":["/Users/ikuzmin/Documents/morozov-name/pages/three-model.js"],"names":["React","useRef","useState","useEffect","Canvas","useFrame","useLoader","THREE","GLTFLoader","Model","Buildings","mesh","gltf","current","AnimationMixer","scene","console","log","Box","props","hovered","setHover","active","setActive","event","ThreeRender","width","height"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\n\nimport * as THREE from 'three'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\n\nimport Model from '../components/model'\n\nconst Buildings = () => {\n  const mesh = useRef()\n\n  const [gltf] = useLoader(new GLTFLoader(), 'models/1.glb')\n\n  useEffect(() => {\n    if(gltf) {\n      mesh.current = new THREE.AnimationMixer(gltf.scene)\n\n      console.log(gltf.scene)\n    }\n  }, [gltf])\n\n  return gltf ? <primitive object = { gltf.scene } /> : null\n\n}\n\nfunction Box(props) {\n  // This reference will give us direct access to the mesh\n  const mesh = useRef()\n\n  console.log(mesh)\n\n  // Set up state for the hovered and active state\n  const [hovered, setHover] = useState(false)\n  const [active, setActive] = useState(false)\n\n  \n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      scale={active ? [1.5, 1.5, 1.5] : [1, 1, 1]}\n      onClick={(event) => setActive(!active)}\n      onPointerOver={(event) => setHover(true)}\n      onPointerOut={(event) => setHover(false)}>\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />\n    </mesh>\n  )\n}\n\nconst ThreeRender = () => {\n\n    return (\n        <div style={{width: '100vw', height: '100vh'}}>\n            <Model/>\n            <Canvas>\n                <Buildings/>\n                <ambientLight />\n                <pointLight position={[10, 10, 10]} />\n                <Box position={[-1.2, 0, 0]} />\n                <Box position={[1.2, 0, 0]} />\n            </Canvas>\n        </div>\n    )\n}\n\nexport default ThreeRender"]},"metadata":{},"sourceType":"module"}